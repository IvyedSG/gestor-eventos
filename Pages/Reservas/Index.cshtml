@page
@model gestor_eventos.Pages.Reservas.IndexModel
@{
    ViewData["Title"] = "Gestionar Reservas";
}

<!-- Filtros y búsqueda -->
<partial name="_ReservasFilters" />

<!-- Tabla de reservas -->
<partial name="_ReservasTable" />

<!-- Modal para Nueva Reserva -->
<partial name="_NewReservationModal" />

<!-- Modal para Seleccionar Servicios -->
<partial name="_SelectServiceModal" />

<!-- Modal para Ver Detalle de Reserva -->
<partial name="_ViewReservationModal" />

<!-- Modal para Editar Reserva -->
<partial name="_EditReservationModal" />

<!-- Modal para Imprimir Reserva -->
<partial name="_PrintReservationModal" />
@section Scripts {
    <script>
        // Configurar modal de ver detalles de reserva
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar tooltips para descripciones truncadas
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Toggle para formulario de cliente nuevo/existente
            document.getElementById('existingClient').addEventListener('change', function() {
                if (this.checked) {
                    document.getElementById('existingClientForm').style.display = 'block';
                    document.getElementById('newClientForm').style.display = 'none';
                }
            });
            
            document.getElementById('newClient').addEventListener('change', function() {
                if (this.checked) {
                    document.getElementById('existingClientForm').style.display = 'none';
                    document.getElementById('newClientForm').style.display = 'block';
                }
            });
            
            // Funcionalidad para limpiar filtros
            document.getElementById('clearFilters').addEventListener('click', function() {
                document.querySelector('[name="SearchTerm"]').value = '';
                document.querySelector('[name="StatusFilter"]').value = '';
                document.querySelector('[name="EventTypeFilter"]').value = '';
                document.querySelector('[name="DateFilter"]').value = '';
                
                // Opcional: enviar el formulario automáticamente después de limpiar
                document.getElementById('filterForm').submit();
            });
            
            // Definición de servicios disponibles
            const servicios = {
                1: { nombre: "Salón Principal", precio: 250000, items: 1 },
                2: { nombre: "Catering Premium", precio: 15000, items: 50 },
                3: { nombre: "DJ", precio: 120000, items: 1 },
                4: { nombre: "Decoración Básica", precio: 80000, items: 1 },
                5: { nombre: "Fotografía", precio: 150000, items: 1 }
            };
            
            // Actualizar el select de servicios ocultando los ya seleccionados
            function actualizarSelectServicios() {
                const select = document.getElementById('serviceSelect');
                const serviciosEnTabla = Array.from(document.querySelectorAll('#servicesTable tr[data-service-id]'))
                    .map(row => row.getAttribute('data-service-id'));
                
                // Restaurar todas las opciones
                Array.from(select.options).forEach((option, index) => {
                    if (index === 0) return; // Saltar la primera opción (placeholder)
                    option.style.display = '';
                });
                
                // Ocultar opciones ya seleccionadas
                serviciosEnTabla.forEach(serviceId => {
                    const option = select.querySelector(`option[value="${serviceId}"]`);
                    if (option) {
                        option.style.display = 'none';
                    }
                });
            }
            
            // Inicializar el select
            actualizarSelectServicios();
            
            // Añadir servicio al hacer clic en el selector
            document.getElementById('serviceSelect').addEventListener('change', function() {
                const serviceId = this.value;
                if (!serviceId || serviceId === 'Seleccionar servicio para añadir') return;
                
                const servicio = servicios[serviceId];
                if (!servicio) return;
                
                // Crear nueva fila en la tabla
                const tbody = document.querySelector('#servicesTable tbody');
                const newRow = document.createElement('tr');
                newRow.setAttribute('data-service-id', serviceId);
                
                // Cantidad fija según el tipo de servicio
                const cantidad = servicio.items;
                const precioTotal = servicio.precio * cantidad;
                
                newRow.innerHTML = `
                    <td>${servicio.nombre}</td>
                    <td>${cantidad}</td>
                    <td>${formatCurrency(precioTotal)}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-link text-danger delete-service">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                
                // Insertar antes de la fila del total
                const totalRow = tbody.querySelector('tr.fw-bold');
                tbody.insertBefore(newRow, totalRow);
                
                // Actualizar el total
                actualizarTotal();
                
                // Actualizar opciones disponibles en el selector
                actualizarSelectServicios();
                
                // Reiniciar selección
                this.selectedIndex = 0;
            });
            
            // Eliminar servicio al hacer clic en el ícono de basura
            document.querySelector('#servicesTable').addEventListener('click', function(e) {
                if (e.target.closest('.delete-service')) {
                    const row = e.target.closest('tr');
                    const serviceId = row.getAttribute('data-service-id');
                    
                    // Eliminar la fila
                    row.remove();
                    
                    // Actualizar total
                    actualizarTotal();
                    
                    // Actualizar opciones disponibles en el selector
                    actualizarSelectServicios();
                }
            });
            
            // Función para formatear moneda
            function formatCurrency(amount) {
                return new Intl.NumberFormat('es-CL', { 
                    style: 'currency', 
                    currency: 'CLP', 
                    maximumFractionDigits: 0 
                }).format(amount);
            }
            
            // Función para actualizar el total
            function actualizarTotal() {
                let total = 0;
                const filas = document.querySelectorAll('#servicesTable tbody tr:not(.fw-bold)');
                
                filas.forEach(fila => {
                    const precioText = fila.cells[2].textContent;
                    const precio = parseInt(precioText.replace(/[^\d]/g, ''));
                    total += precio;
                });
                
                document.getElementById('servicesTotalAmount').textContent = formatCurrency(total);
                document.getElementById('totalPrice').value = total;
            }
            
            // Actualizar precio total al cambiar manualmente
            document.getElementById('totalPrice').addEventListener('input', function() {
                // No es necesario actualizar la tabla, solo permitimos la edición manual
            });
            
            // Configurar eventos iniciales para botones de eliminar servicio en filas existentes
            document.querySelectorAll('.delete-service').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('tr');
                    const serviceId = row.getAttribute('data-service-id');
                    
                    // Eliminar la fila
                    row.remove();
                    
                    // Actualizar total
                    actualizarTotal();
                    
                    // Actualizar opciones disponibles en el selector
                    actualizarSelectServicios();
                });
            });
            
            // Calcular total inicial
            actualizarTotal();
            
            // Cargar datos en el modal de ver detalle cuando se abre
            const viewReservationModal = document.getElementById('viewReservationModal');
            viewReservationModal.addEventListener('show.bs.modal', function (event) {
                // Obtener el botón que activó el modal
                const button = event.relatedTarget;
                
                // Obtener el ID de la reserva desde el botón (por ejemplo, data-reservation-id)
                const reservationId = button.getAttribute('data-reservation-id') || "1";
                
                // En un caso real, aquí harías una petición AJAX para obtener los detalles de la reserva
                // Para esta demostración, usaremos datos de ejemplo
                
                // Datos de ejemplo de una reserva
                const reservationExample = {
                    id: reservationId,
                    eventName: "Boda de Carlos y María",
                    clientName: "Carlos Rodríguez",
                    clientEmail: "carlos@ejemplo.com",
                    clientPhone: "+56 9 1234 5678",
                    status: "Confirmada",
                    eventType: "Boda",
                    date: "18/04/2025",
                    time: "16:00",
                    price: 1120000,
                    description: "Boda para 150 personas en Salón Diamante. El novio solicita decoración en tonos azules y plateados. Se requiere estacionamiento para al menos 30 vehículos.",
                    services: [
                        { name: "Salón Principal", quantity: 1, price: 250000 },
                        { name: "Catering Premium", quantity: 50, price: 750000 },
                        { name: "DJ", quantity: 1, price: 120000 }
                    ]
                };
                
                // Actualizar los elementos en el modal con los datos de la reserva
                document.getElementById('viewReservationId').textContent = reservationExample.id;
                document.getElementById('viewEventName').textContent = reservationExample.eventName;
                document.getElementById('viewClientName').textContent = reservationExample.clientName;
                document.getElementById('viewClientEmail').textContent = reservationExample.clientEmail;
                document.getElementById('viewClientPhone').textContent = reservationExample.clientPhone;
                document.getElementById('viewEventDate').textContent = reservationExample.date;
                document.getElementById('viewEventTime').textContent = reservationExample.time;
                document.getElementById('viewEventPrice').textContent = formatCurrency(reservationExample.price);
                document.getElementById('viewEventDescription').textContent = reservationExample.description;
                
                // Actualizar tipo de evento y estado con el diseño de badge adecuado
                const eventTypeEl = document.getElementById('viewEventType');
                eventTypeEl.innerHTML = `<i class="bi bi-bookmark me-1"></i>${reservationExample.eventType}`;
                
                const eventStatusEl = document.getElementById('viewEventStatus');
                if (reservationExample.status === "Confirmada") {
                    eventStatusEl.className = "badge bg-success bg-opacity-10 text-success px-3 py-2";
                    eventStatusEl.innerHTML = '<i class="bi bi-check-circle me-1"></i>Confirmada';
                } else if (reservationExample.status === "Pendiente") {
                    eventStatusEl.className = "badge bg-warning bg-opacity-10 text-warning px-3 py-2";
                    eventStatusEl.innerHTML = '<i class="bi bi-clock me-1"></i>Pendiente';
                } else if (reservationExample.status === "Cancelada") {
                    eventStatusEl.className = "badge bg-danger bg-opacity-10 text-danger px-3 py-2";
                    eventStatusEl.innerHTML = '<i class="bi bi-x-circle me-1"></i>Cancelada';
                } else if (reservationExample.status === "Finalizada") {
                    eventStatusEl.className = "badge bg-secondary bg-opacity-10 text-secondary px-3 py-2";
                    eventStatusEl.innerHTML = '<i class="bi bi-flag me-1"></i>Finalizada';
                }
                
                // Cargar servicios en la tabla
                const servicesTable = document.getElementById('viewServicesTable').querySelector('tbody');
                // Limpiar tabla excepto la última fila (total)
                const totalRow = servicesTable.querySelector('tr.fw-bold');
                while (servicesTable.firstChild && servicesTable.firstChild !== totalRow) {
                    servicesTable.removeChild(servicesTable.firstChild);
                }
                
                // Agregar servicios
                let totalAmount = 0;
                reservationExample.services.forEach(service => {
                    const serviceAmount = service.quantity * service.price;
                    totalAmount += serviceAmount;
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${service.name}</td>
                        <td>${service.quantity}</td>
                        <td class="text-end">${formatCurrency(serviceAmount)}</td>
                    `;
                    
                    servicesTable.insertBefore(row, totalRow);
                });
                
                // Actualizar total
                document.getElementById('viewServicesTotalAmount').textContent = formatCurrency(totalAmount);
            });
        });
        
        // Actualizar el select de servicios de edición ocultando los ya seleccionados
        function actualizarSelectServiciosEdicion() {
            const select = document.getElementById('editServiceSelect');
            if (!select) return;
            
            const serviciosEnTabla = Array.from(document.querySelectorAll('#editServicesTable tr[data-service-id]'))
                .map(row => row.getAttribute('data-service-id'));
            
            // Restaurar todas las opciones
            Array.from(select.options).forEach((option, index) => {
                if (index === 0) return; // Saltar la primera opción (placeholder)
                option.style.display = '';
            });
            
            // Ocultar opciones ya seleccionadas
            serviciosEnTabla.forEach(serviceId => {
                const option = select.querySelector(`option[value="${serviceId}"]`);
                if (option) {
                    option.style.display = 'none';
                }
            });
        }
        
        // Cargar datos en el modal de edición cuando se abre
        const editReservationModal = document.getElementById('editReservationModal');
        if (editReservationModal) {
            editReservationModal.addEventListener('show.bs.modal', function (event) {
                // Obtener el botón que activó el modal
                const button = event.relatedTarget;
                
                // Obtener el ID de la reserva
                const reservationId = button.getAttribute('data-reservation-id') || "1";
                
                // Establecer el ID en el modal
                document.getElementById('editReservationId').textContent = reservationId;
                
                // En un caso real, aquí harías una petición AJAX para cargar los datos actuales
                
                // Inicializar el selector de servicios
                actualizarSelectServiciosEdicion();
                
                // Añadir servicio al hacer clic en el selector
                const editServiceSelect = document.getElementById('editServiceSelect');
                if (editServiceSelect) {
                    // Eliminar manejadores de eventos anteriores
                    const newEditServiceSelect = editServiceSelect.cloneNode(true);
                    editServiceSelect.parentNode.replaceChild(newEditServiceSelect, editServiceSelect);
                    
                    // Añadir nuevo manejador de evento
                    newEditServiceSelect.addEventListener('change', function() {
                        const serviceId = this.value;
                        if (!serviceId || serviceId === 'Seleccionar servicio para añadir') return;
                        
                        const servicios = {
                            1: { nombre: "Salón Principal", precio: 250000, items: 1 },
                            2: { nombre: "Catering Premium", precio: 15000, items: 50 },
                            3: { nombre: "DJ", precio: 120000, items: 1 },
                            4: { nombre: "Decoración Básica", precio: 80000, items: 1 },
                            5: { nombre: "Fotografía", precio: 150000, items: 1 }
                        };
                        
                        const servicio = servicios[serviceId];
                        if (!servicio) return;
                        
                        // Crear nueva fila en la tabla
                        const tbody = document.querySelector('#editServicesTable tbody');
                        const newRow = document.createElement('tr');
                        newRow.setAttribute('data-service-id', serviceId);
                        
                        // Cantidad fija según el tipo de servicio
                        const cantidad = servicio.items;
                        const precioTotal = servicio.precio * cantidad;
                        
                        newRow.innerHTML = `
                            <td>${servicio.nombre}</td>
                            <td>${cantidad}</td>
                            <td>${formatCurrency(precioTotal)}</td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-link text-danger delete-service">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        `;
                        
                        // Insertar antes de la fila del total
                        const totalRow = tbody.querySelector('tr.fw-bold');
                        tbody.insertBefore(newRow, totalRow);
                        
                        // Configurar el botón de eliminar para la nueva fila
                        const deleteButton = newRow.querySelector('.delete-service');
                        deleteButton.addEventListener('click', function() {
                            newRow.remove();
                            actualizarTotalEdicion();
                            actualizarSelectServiciosEdicion();
                        });
                        
                        // Actualizar el total
                        actualizarTotalEdicion();
                        
                        // Actualizar opciones disponibles en el selector
                        actualizarSelectServiciosEdicion();
                        
                        // Reiniciar selección
                        this.selectedIndex = 0;
                    });
                }
                
                // Configurar botones de eliminación existentes
                document.querySelectorAll('#editServicesTable .delete-service').forEach(button => {
                    // Eliminar manejadores de eventos anteriores
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);
                    
                    // Añadir nuevo manejador de evento
                    newButton.addEventListener('click', function() {
                        const row = this.closest('tr');
                        // No eliminamos si es la última fila
                        if (document.querySelectorAll('#editServicesTable tbody tr:not(.fw-bold)').length > 1) {
                            row.remove();
                            actualizarTotalEdicion();
                            actualizarSelectServiciosEdicion();
                        } else {
                            alert('Debe mantener al menos un servicio');
                        }
                    });
                });
                
                // Calcular total inicial
                actualizarTotalEdicion();
            });
        }
        
        // Función para actualizar el total en el formulario de edición
        function actualizarTotalEdicion() {
            let total = 0;
            const filas = document.querySelectorAll('#editServicesTable tbody tr:not(.fw-bold)');
            
            filas.forEach(fila => {
                const precioText = fila.cells[2].textContent;
                const precio = parseInt(precioText.replace(/[^\d]/g, ''));
                total += precio;
            });
            
            const totalElement = document.getElementById('editServicesTotalAmount');
            if (totalElement) {
                totalElement.textContent = formatCurrency(total);
            }
            
            const totalPriceInput = document.getElementById('editTotalPrice');
            if (totalPriceInput) {
                totalPriceInput.value = total;
            }
        }
        
        // Guardar cambios
        document.getElementById('saveEditReservation')?.addEventListener('click', function() {
            // Aquí implementarías la lógica para enviar los datos al servidor
            alert('Cambios guardados correctamente');
            const modal = bootstrap.Modal.getInstance(document.getElementById('editReservationModal'));
            modal.hide();
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <script>
        // Configurar el modal de impresión
        const printReservationModal = document.getElementById('printReservationModal');
        if (printReservationModal) {
            printReservationModal.addEventListener('show.bs.modal', function (event) {
                // Obtener el botón que activó el modal
                const button = event.relatedTarget;
                
                // Obtener el ID de la reserva desde el botón
                const reservationId = button.getAttribute('data-reservation-id') || "1";
                
                // En un caso real, aquí harías una petición AJAX para obtener los detalles
                // Para esta demostración, usaremos datos de ejemplo
                const reservationExample = {
                    id: reservationId,
                    eventName: "Boda de Carlos y María",
                    clientName: "Carlos Rodríguez",
                    clientEmail: "carlos@ejemplo.com",
                    clientPhone: "+56 9 1234 5678",
                    status: "Confirmada",
                    eventType: "Boda",
                    date: "18/04/2025",
                    time: "16:00",
                    price: 1120000,
                    description: "Boda para 150 personas en Salón Diamante. El novio solicita decoración en tonos azules y plateados. Se requiere estacionamiento para al menos 30 vehículos.",
                    services: [
                        { name: "Salón Principal", quantity: 1, unitPrice: 250000, price: 250000 },
                        { name: "Catering Premium", quantity: 50, unitPrice: 15000, price: 750000 },
                        { name: "DJ", quantity: 1, unitPrice: 120000, price: 120000 }
                    ]
                };
                
                // Establecer la fecha actual en el comprobante
                const currentDate = new Date();
                const formattedDate = currentDate.toLocaleDateString('es-CL');
                document.getElementById('printCurrentDate').textContent = formattedDate;
                
                // Llenar los datos del comprobante
                document.getElementById('printReservationId').textContent = reservationExample.id;
                document.getElementById('printComprobantId').textContent = reservationExample.id;
                document.getElementById('printEventName').textContent = reservationExample.eventName;
                document.getElementById('printClientName').textContent = reservationExample.clientName;
                document.getElementById('printClientEmail').textContent = reservationExample.clientEmail;
                document.getElementById('printClientPhone').textContent = reservationExample.clientPhone;
                document.getElementById('printEventDate').textContent = reservationExample.date;
                document.getElementById('printEventTime').textContent = reservationExample.time;
                document.getElementById('printEventType').textContent = reservationExample.eventType;
                document.getElementById('printEventDescription').textContent = reservationExample.description;
                
                // Actualizar el estado con el diseño de badge adecuado
                const statusEl = document.getElementById('printReservationStatus');
                statusEl.textContent = reservationExample.status;
                
                if (reservationExample.status === "Confirmada") {
                    statusEl.className = "badge bg-success";
                } else if (reservationExample.status === "Pendiente") {
                    statusEl.className = "badge bg-warning";
                } else if (reservationExample.status === "Cancelada") {
                    statusEl.className = "badge bg-danger";
                } else if (reservationExample.status === "Finalizada") {
                    statusEl.className = "badge bg-secondary";
                }
                
                // Llenar la tabla de servicios
                const servicesTableBody = document.querySelector('#printServicesTable tbody');
                servicesTableBody.innerHTML = '';
                
                let totalAmount = 0;
                reservationExample.services.forEach(service => {
                    totalAmount += service.price;
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${service.name}</td>
                        <td class="text-center">${service.quantity}</td>
                        <td class="text-center">${formatCurrency(service.unitPrice)}</td>
                        <td class="text-end">${formatCurrency(service.price)}</td>
                    `;
                    
                    servicesTableBody.appendChild(row);
                });
                
                // Actualizar el total
                document.getElementById('printServicesTotalAmount').textContent = formatCurrency(totalAmount);
            });
        }
        
        // Función para imprimir el comprobante
        document.getElementById('printButton')?.addEventListener('click', function() {
            const printContent = document.getElementById('printableArea');
            printReservationDocument(printContent.innerHTML);
        });

        // Función reutilizable para imprimir contenido
        function printReservationDocument(content) {
            // Crear un iframe oculto
            const iframe = createHiddenIframe();
            
            // Escribir el contenido en el iframe con estilos
            writeContentToIframe(iframe, content);
            
            // Realizar la impresión después de que se cargue el contenido
            setTimeout(() => {
                printAndCleanup(iframe);
            }, 500);
        }

        // Crear iframe oculto
        function createHiddenIframe() {
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            return iframe;
        }

        // Escribir contenido en el iframe con estilos incluidos
        function writeContentToIframe(iframe, content) {
            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
            iframeDoc.open();
            iframeDoc.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Comprobante de Reserva</title>
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            margin: 20px;
                        }
                        ${getPrintStyles()}
                    </style>
                </head>
                <body>
                    ${content}
                </body>
                </html>
            `);
            iframeDoc.close();
        }

        // Imprimir el documento y limpiar el iframe
        function printAndCleanup(iframe) {
            iframe.contentWindow.focus();
            iframe.contentWindow.print();
            
            // Limpiar el iframe después de imprimir
            setTimeout(() => {
                document.body.removeChild(iframe);
            }, 100);
        }

        // Extraer los estilos para la impresión
        function getPrintStyles() {
            return `
                .row { display: flex; flex-wrap: wrap; }
                .col-6 { width: 50%; }
                .col-12 { width: 100%; }
                .col-md-6 { width: 50%; }
                .text-end { text-align: right; }
                .text-center { text-align: center; }
                .border-top { border-top: 1px solid #dee2e6; }
                .mb-0, .mb-1, .mb-2, .mb-3, .mb-4 { margin-bottom: 0.25rem; }
                .mt-1, .mt-5 { margin-top: 0.25rem; }
                .p-2, .p-4, .pt-4 { padding: 0.5rem; }
                .bg-light { background-color: #f8f9fa; }
                .badge {
                    padding: 0.25em 0.4em;
                    font-size: 75%;
                    font-weight: 700;
                    border-radius: 0.25rem;
                    color: white;
                }
                .bg-success { background-color: #28a745; }
                .bg-warning { background-color: #ffc107; color: black; }
                .bg-danger { background-color: #dc3545; }
                .bg-secondary { background-color: #6c757d; }
                .table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-bottom: 1rem;
                }
                .table th, .table td {
                    padding: 0.75rem;
                    border: 1px solid #dee2e6;
                }
                .table-striped tbody tr:nth-of-type(odd) {
                    background-color: rgba(0, 0, 0, 0.05);
                }
                .fw-bold { font-weight: bold; }
                .small { font-size: 80%; }
                .text-muted { color: #6c757d; }
            `;
        }

        // Función para descargar como PDF
        document.getElementById('downloadPDF')?.addEventListener('click', function() {
            const element = document.getElementById('printableArea');
            const options = {
                margin: 10,
                filename: 'comprobante-reserva.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
            };
          
            html2pdf().from(element).set(options).save();
        });
    </script>
}