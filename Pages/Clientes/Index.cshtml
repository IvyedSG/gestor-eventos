@page
@model gestor_eventos.Pages.Clientes.IndexModel
@{
    ViewData["Title"] = "Clientes";
}

<!-- Filtros y búsqueda -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-3">
        <form method="get" id="filterForm">
            <div class="row g-2 align-items-center">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-light">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-light bg-light" 
                               placeholder="Buscar por nombre, correo o teléfono" 
                               asp-for="SearchTerm">
                    </div>
                </div>
                
                <div class="col-md-2">
                    <select class="form-select border-light bg-light" asp-for="TypeFilter">
                        <option value="">Tipo de cliente</option>
                        <option value="Individual">Individual</option>
                        <option value="Empresa">Empresa</option>
                    </select>
                </div>
                
                <div class="col-md-1">
                    <button type="button" id="clearFilters" class="btn btn-secondary w-100" title="Limpiar filtros">
                        <i class="bi bi-arrow-counterclockwise"> Limpiar</i>
                    </button>
                </div>
                
                <div class="col-md-1">
                    <button class="btn btn-primary w-100" type="submit" title="Filtrar">
                        <i class="bi bi-funnel-fill"> Filtrar</i>
                    </button>
                </div>
                
                <div class="col-md-2">
                    <button class="btn btn-success w-100" type="button" data-bs-toggle="modal" data-bs-target="#newClientModal">
                        <i class="bi bi-person-plus me-1"></i> Nuevo Cliente
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Tabla de clientes -->
<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th scope="col" class="ps-4">Nombre</th>
                        <th scope="col">Correo</th>
                        <th scope="col">Teléfono</th>
                        <th scope="col">Dirección</th>
                        <th scope="col">Tipo</th>
                        <th scope="col">Total Eventos</th>
                        <th scope="col">Última Reserva</th>
                        <th scope="col" class="text-center">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Clients != null && Model.Clients.Any())
                    {
                        @foreach (var client in Model.Clients)
                        {
                            <tr class="client-row" data-client-id="@client.Id" data-registration-date="@client.RegistrationDate.ToString("dd/MM/yyyy")">
                                <td class="ps-4 fw-medium">@client.Name</td>
                                <td>@client.Email</td>
                                <td>@client.Phone</td>
                                <td>@client.Address</td>
                                <td>
                                    @if (client.Type == "Individual")
                                    {
                                        <span class="badge bg-primary bg-opacity-10 text-primary px-2 py-1">Individual</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-info bg-opacity-10 text-info px-2 py-1">Empresa</span>
                                    }
                                </td>
                                <td>@client.EventCount</td>
                                <td>
                                    @if (client.LastReservation.HasValue)
                                    {
                                        <span>@client.LastReservation.Value.ToString("dd/MM/yyyy")</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin reservas</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex justify-content-center gap-2">
                                        <button class="btn btn-sm btn-outline-primary view-client-btn" 
                                                data-bs-toggle="modal" 
                                                data-bs-target="#viewClientModal" 
                                                data-client-id="@client.Id">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary edit-client-btn"
                                                data-bs-toggle="modal" 
                                                data-bs-target="#editClientModal" 
                                                data-client-id="@client.Id">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger delete-client-btn"
                                                data-client-id="@client.Id">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center py-4">
                                <div class="d-flex flex-column align-items-center">
                                    <i class="bi bi-people text-muted" style="font-size: 2.5rem;"></i>
                                    <h5 class="mt-3 mb-2">No se encontraron clientes</h5>
                                    <p class="text-muted mb-3">Intenta con otra búsqueda o agrega un nuevo cliente</p>
                                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#newClientModal">
                                        <i class="bi bi-person-plus me-1"></i> Nuevo Cliente
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Paginación -->
@if (Model.Clients != null && Model.Clients.Any())
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <p class="text-muted">Mostrando <strong>@Model.Clients.Count</strong> clientes</p>
        <nav>
            <ul class="pagination">
                <li class="page-item disabled">
                    <span class="page-link">
                        <i class="bi bi-chevron-left"></i>
                    </span>
                </li>
                <li class="page-item active">
                    <a class="page-link" href="#">1</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">2</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">3</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="#">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
}

<!-- Modal para Nuevo Cliente -->
<div class="modal fade" id="newClientModal" tabindex="-1" aria-labelledby="newClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="newClientModalLabel">
                    <i class="bi bi-person-plus me-2 text-primary"></i>Nuevo Cliente
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newClientForm">
                    @Html.AntiForgeryToken()
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="clientType" id="individualClient" value="Individual" checked>
                                <label class="form-check-label" for="individualClient">Individual</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="clientType" id="companyClient" value="Empresa">
                                <label class="form-check-label" for="companyClient">Empresa</label>
                            </div>
                        </div>
                        
                        <div class="col-12"></div>
                        
                        <div class="col-md-6">
                            <label for="clientName" class="form-label" id="nameLabel">Nombre completo</label>
                            <input type="text" class="form-control" id="clientName" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="clientEmail" class="form-label">Correo electrónico</label>
                            <input type="email" class="form-control" id="clientEmail" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="clientPhone" class="form-label">Teléfono</label>
                            <input type="tel" class="form-control" id="clientPhone" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="clientAddress" class="form-label">Dirección</label>
                            <input type="text" class="form-control" id="clientAddress">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveNewClient">Guardar Cliente</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Editar Cliente -->
<div class="modal fade" id="editClientModal" tabindex="-1" aria-labelledby="editClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="editClientModalLabel">
                    <i class="bi bi-pencil-square me-2 text-primary"></i>Editar Cliente
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editClientForm">
                    <input type="hidden" id="editClientId">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="editClientType" id="editIndividualClient" value="Individual">
                                <label class="form-check-label" for="editIndividualClient">Individual</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="editClientType" id="editCompanyClient" value="Empresa">
                                <label class="form-check-label" for="editCompanyClient">Empresa</label>
                            </div>
                        </div>
                        
                        <div class="col-12"></div>
                        
                        <div class="col-md-6">
                            <label for="editClientName" class="form-label" id="editNameLabel">Nombre completo</label>
                            <input type="text" class="form-control" id="editClientName" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="editClientEmail" class="form-label">Correo electrónico</label>
                            <input type="email" class="form-control" id="editClientEmail" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="editClientPhone" class="form-label">Teléfono</label>
                            <input type="tel" class="form-control" id="editClientPhone" required>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="editClientAddress" class="form-label">Dirección</label>
                            <input type="text" class="form-control" id="editClientAddress">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveEditClient">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Ver Detalle de Cliente con su historial -->
<div class="modal fade" id="viewClientModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title">
                    <i class="bi bi-person me-2 text-primary"></i><span id="viewClientName">Nombre del Cliente</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <h6 class="card-title fw-bold mb-3">Información de Contacto</h6>
                        <div class="mb-3">
                            <i class="bi bi-envelope text-primary me-2"></i>
                            <span id="viewClientEmail">correo@ejemplo.com</span>
                        </div>
                        <div class="mb-3">
                            <i class="bi bi-telephone text-primary me-2"></i>
                            <span id="viewClientPhone">123-456-7890</span>
                        </div>
                        <div class="mb-3">
                            <i class="bi bi-geo-alt text-primary me-2"></i>
                            <span id="viewClientAddress">Dirección del cliente</span>
                        </div>
                        
                        <h6 class="card-title fw-bold mb-3 mt-4">Información Adicional</h6>
                        <div class="mb-3">
                            <span class="text-muted">Cliente desde:</span>
                            <span id="viewClientSince" class="ms-1">01/01/2025</span>
                        </div>
                        
                        <div class="mb-3">
                            <span class="text-muted">Total eventos:</span>
                            <span id="viewTotalEvents" class="ms-1 fw-bold">3</span>
                        </div>
                        
                        <div class="mb-3">
                            <span class="text-muted">Última reserva:</span>
                            <span id="viewLastReservation" class="ms-1">18/04/2025</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Confirmar Eliminación de Cliente -->
<div class="modal fade" id="deleteClientModal" tabindex="-1" aria-labelledby="deleteClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteClientModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Confirmar Eliminación
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="deleteClientId">
                <p>¿Está seguro que desea eliminar al cliente <strong id="deleteClientName"></strong>?</p>
                <p class="mb-0 text-danger"><i class="bi bi-exclamation-circle me-2"></i>Esta acción no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteClient">
                    <i class="bi bi-trash me-1"></i>Eliminar Cliente
                </button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
 
            const individualClient = document.getElementById('individualClient');
            const companyClient = document.getElementById('companyClient');
            
            if (individualClient) {
                individualClient.addEventListener('change', function() {
                    document.getElementById('nameLabel').textContent = 'Nombre completo';
                });
            }
            
            if (companyClient) {
                companyClient.addEventListener('change', function() {
                    document.getElementById('nameLabel').textContent = 'Nombre de la empresa';
                });
            }
            
 
            const editIndividualClient = document.getElementById('editIndividualClient');
            const editCompanyClient = document.getElementById('editCompanyClient');
            
            if (editIndividualClient) {
                editIndividualClient.addEventListener('change', function() {
                    document.getElementById('editNameLabel').textContent = 'Nombre completo';
                });
            }
            
            if (editCompanyClient) {
                editCompanyClient.addEventListener('change', function() {
                    document.getElementById('editNameLabel').textContent = 'Nombre de la empresa';
                });
            }

 
            document.querySelectorAll('.view-client-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const clientId = this.dataset.clientId;
                    loadClientDetails(clientId);
                });
            });

 
            function loadClientDetails(clientId) {
 
                const clientRow = document.querySelector(`[data-client-id="${clientId}"]`);
                
                if (!clientRow) return;
                
                const row = clientRow.closest('tr');
                
 
                const name = row.querySelector('td:nth-child(1)').textContent.trim();
                const email = row.querySelector('td:nth-child(2)').textContent.trim();
                const phone = row.querySelector('td:nth-child(3)').textContent.trim();
                const address = row.querySelector('td:nth-child(4)').textContent.trim();
                const type = row.querySelector('td:nth-child(5)').textContent.trim();
                
 
                document.getElementById('viewClientName').textContent = name;
                document.getElementById('viewClientEmail').textContent = email;
                document.getElementById('viewClientPhone').textContent = phone;
                document.getElementById('viewClientAddress').textContent = address || "No disponible";
                
 
                const registrationDate = row.hasAttribute('data-registration-date') 
                    ? row.getAttribute('data-registration-date') 
                    : "No disponible";
                document.getElementById('viewClientSince').textContent = registrationDate;
                
 
                const eventCount = row.querySelector('td:nth-child(6)').textContent.trim();
                document.getElementById('viewTotalEvents').textContent = eventCount;
                
 
                const lastReservation = row.querySelector('td:nth-child(7)').textContent.trim();
                document.getElementById('viewLastReservation').textContent = lastReservation;
            }

 
            const clearFiltersBtn = document.getElementById('clearFilters');
            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function() {
                    const searchTermInput = document.querySelector('[name="SearchTerm"]');
                    const typeFilterSelect = document.querySelector('[name="TypeFilter"]');
                    const filterForm = document.getElementById('filterForm');
                    
                    if (searchTermInput) searchTermInput.value = '';
                    if (typeFilterSelect) typeFilterSelect.value = '';
                    if (filterForm) filterForm.submit();
                });
            }

 
            const saveNewClientBtn = document.getElementById('saveNewClient');
            if (saveNewClientBtn) {
                saveNewClientBtn.addEventListener('click', async function() {
                    try {
 
                        const clientType = document.querySelector('input[name="clientType"]:checked')?.value;
                        
 
                        if (!clientType) {
                            alert('Por favor selecciona el tipo de cliente (Individual o Empresa)');
                            return;
                        }
                        
                        const clientName = document.getElementById('clientName')?.value;
                        const clientEmail = document.getElementById('clientEmail')?.value;
                        const clientPhone = document.getElementById('clientPhone')?.value;
                        const clientAddress = document.getElementById('clientAddress')?.value;
                        
 
                        if (!clientName || !clientEmail || !clientPhone) {
                            alert('Por favor complete todos los campos obligatorios');
                            return;
                        }
                        
 
                        const clientData = {
                            tipoCliente: clientType === 'Individual' ? 'INDIVIDUAL' : 'EMPRESA',
                            nombre: clientName,
                            correoElectronico: clientEmail,
                            telefono: clientPhone,
                            direccion: clientAddress || ''
                        };
                        
 
                        saveNewClientBtn.disabled = true;
                        saveNewClientBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';
                        
 
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                        
                        if (!token) {
                            throw new Error('Token de verificación no encontrado');
                        }
                        
 
                        const response = await fetch('/Clientes?handler=CreateCliente', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(clientData)
                        });
                        
 
                        if (!response.ok) {
                            throw new Error(`Error al crear cliente: ${response.statusText}`);
                        }
                        
 
                        const result = await response.json();
                        
                        if (result.success) {
 
                            const modal = bootstrap.Modal.getInstance(document.getElementById('newClientModal'));
                            modal.hide();
                            
 
                            const alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-success alert-dismissible fade show';
                            alertDiv.setAttribute('role', 'alert');
                            alertDiv.innerHTML = `
                                <i class="bi bi-check-circle-fill me-2"></i>
                                Cliente creado exitosamente
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;
                            
 
                            const firstCard = document.querySelector('.card.border-0.shadow-sm');
                            if (firstCard && firstCard.parentNode) {
                                firstCard.parentNode.insertBefore(alertDiv, firstCard.nextSibling);
                            }
                            
 
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            alert(`Error: ${result.message || 'No se pudo crear el cliente'}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Ha ocurrido un error al procesar la solicitud');
                    } finally {
 
                        saveNewClientBtn.disabled = false;
                        saveNewClientBtn.innerHTML = 'Guardar Cliente';
                    }
                });
            }

 
            document.querySelectorAll('.edit-client-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const clientId = this.dataset.clientId;
                    loadClientForEdit(clientId);
                });
            });

 
            function loadClientForEdit(clientId) {
 
                const clientRow = document.querySelector(`[data-client-id="${clientId}"]`);
                
                if (!clientRow) return;
                
                const row = clientRow.closest('tr');
                
 
                const name = row.querySelector('td:nth-child(1)').textContent.trim();
                const email = row.querySelector('td:nth-child(2)').textContent.trim();
                const phone = row.querySelector('td:nth-child(3)').textContent.trim();
                const address = row.querySelector('td:nth-child(4)').textContent.trim();
                const type = row.querySelector('td:nth-child(5)').querySelector('.badge').textContent.trim();
                
 
                document.getElementById('editClientId').value = clientId;
                
 
                document.getElementById('editClientName').value = name;
                document.getElementById('editClientEmail').value = email;
                document.getElementById('editClientPhone').value = phone;
                document.getElementById('editClientAddress').value = address;
                
 
                if (type === 'Individual') {
                    document.getElementById('editIndividualClient').checked = true;
                    document.getElementById('editNameLabel').textContent = 'Nombre completo';
                } else {
                    document.getElementById('editCompanyClient').checked = true;
                    document.getElementById('editNameLabel').textContent = 'Nombre de la empresa';
                }
            }

 
            const saveEditClientBtn = document.getElementById('saveEditClient');
            if (saveEditClientBtn) {
                saveEditClientBtn.addEventListener('click', async function() {
                    try {
 
                        const clientId = document.getElementById('editClientId').value;
                        const clientType = document.querySelector('input[name="editClientType"]:checked')?.value;
                        
 
                        if (!clientType) {
                            alert('Por favor selecciona el tipo de cliente (Individual o Empresa)');
                            return;
                        }
                        
                        const clientName = document.getElementById('editClientName')?.value;
                        const clientEmail = document.getElementById('editClientEmail')?.value;
                        const clientPhone = document.getElementById('editClientPhone')?.value;
                        const clientAddress = document.getElementById('editClientAddress')?.value;
                        
 
                        if (!clientName || !clientEmail || !clientPhone) {
                            alert('Por favor complete todos los campos obligatorios');
                            return;
                        }
                        
 
                        const clientData = {
                            id: clientId,
                            tipoCliente: clientType === 'Individual' ? 'INDIVIDUAL' : 'EMPRESA',
                            nombre: clientName,
                            correoElectronico: clientEmail,
                            telefono: clientPhone,
                            direccion: clientAddress || ''
                        };
                        
 
                        saveEditClientBtn.disabled = true;
                        saveEditClientBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';
                        
 
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                        
                        if (!token) {
                            throw new Error('Token de verificación no encontrado');
                        }
                        
 
                        const response = await fetch('/Clientes?handler=UpdateCliente', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(clientData)
                        });
                        
 
                        if (!response.ok) {
                            throw new Error(`Error al actualizar cliente: ${response.statusText}`);
                        }
                        
 
                        const result = await response.json();
                        
                        if (result.success) {
 
                            const modal = bootstrap.Modal.getInstance(document.getElementById('editClientModal'));
                            modal.hide();
                            
 
                            const alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-success alert-dismissible fade show';
                            alertDiv.setAttribute('role', 'alert');
                            alertDiv.innerHTML = `
                                <i class="bi bi-check-circle-fill me-2"></i>
                                Cliente actualizado exitosamente
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;
                            
 
                            const firstCard = document.querySelector('.card.border-0.shadow-sm');
                            if (firstCard && firstCard.parentNode) {
                                firstCard.parentNode.insertBefore(alertDiv, firstCard.nextSibling);
                            }
                            
 
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            alert(`Error: ${result.message || 'No se pudo actualizar el cliente'}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Ha ocurrido un error al procesar la solicitud');
                    } finally {
 
                        saveEditClientBtn.disabled = false;
                        saveEditClientBtn.innerHTML = 'Guardar Cambios';
                    }
                });
            }

 
            document.querySelectorAll('.delete-client-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const clientId = this.dataset.clientId;
                    const clientRow = document.querySelector(`[data-client-id="${clientId}"]`);
                    
                    if (!clientRow) return;
                    
                    const row = clientRow.closest('tr');
                    const clientName = row.querySelector('td:nth-child(1)').textContent.trim();
                    
 
                    document.getElementById('deleteClientId').value = clientId;
                    document.getElementById('deleteClientName').textContent = clientName;
                    
 
                    const deleteModal = new bootstrap.Modal(document.getElementById('deleteClientModal'));
                    deleteModal.show();
                });
            });
            
 
            const confirmDeleteBtn = document.getElementById('confirmDeleteClient');
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', function() {
                    const clientId = document.getElementById('deleteClientId').value;
                    const clientName = document.getElementById('deleteClientName').textContent;
                    
 
                    confirmDeleteBtn.disabled = true;
                    confirmDeleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Eliminando...';
                    
 
                    deleteClient(clientId, clientName);
                });
            }
            
 
            async function deleteClient(clientId, clientName) {
                try {
 
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    
                    if (!token) {
                        throw new Error('Token de verificación no encontrado');
                    }
                    
 
                    const response = await fetch('/Clientes?handler=DeleteCliente', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ id: clientId })
                    });
                    
 
                    if (!response.ok) {
                        throw new Error(`Error al eliminar cliente: ${response.statusText}`);
                    }
                    
 
                    const result = await response.json();
                    
                    if (result.success) {
 
                        const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteClientModal'));
                        deleteModal.hide();
                        
 
                        const alertDiv = document.createElement('div');
                        alertDiv.className = 'alert alert-success alert-dismissible fade show';
                        alertDiv.setAttribute('role', 'alert');
                        alertDiv.innerHTML = `
                            <i class="bi bi-check-circle-fill me-2"></i>
                            Cliente "${clientName}" eliminado exitosamente
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                        
 
                        const firstCard = document.querySelector('.card.border-0.shadow-sm');
                        if (firstCard && firstCard.parentNode) {
                            firstCard.parentNode.insertBefore(alertDiv, firstCard.nextSibling);
                        }
                        
 
                        const clientRow = document.querySelector(`tr[data-client-id="${clientId}"]`);
                        if (clientRow) {
                            clientRow.remove();
                        }
                        
 
                        const remainingRows = document.querySelectorAll('tbody tr.client-row');
                        if (remainingRows.length === 0) {
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        }
                    } else {
                        alert(`Error: ${result.message || 'No se pudo eliminar el cliente'}`);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Ha ocurrido un error al procesar la solicitud');
                } finally {
 
                    const confirmDeleteBtn = document.getElementById('confirmDeleteClient');
                    if (confirmDeleteBtn) {
                        confirmDeleteBtn.disabled = false;
                        confirmDeleteBtn.innerHTML = '<i class="bi bi-trash me-1"></i>Eliminar Cliente';
                    }
                }
            }
        });
    </script>
}