@page
@model gestor_eventos.Pages.Pagos.IndexModel
@{
    ViewData["Title"] = "Gestión de Pagos";
}

@Html.AntiForgeryToken()

<!-- Contenedor para alertas dinámicas -->
<div id="alertContainer" class="mb-4"></div>

<!-- Header con estadísticas -->
<div class="row g-3 mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="icon-container bg-primary bg-opacity-10">
                        <i class="bi bi-cash-coin text-primary"></i>
                    </div>
                    <span class="badge bg-primary bg-opacity-10 text-primary px-2 py-1">Pagos</span>
                </div>
                <h5 class="fw-bold mb-1">@Model.TotalPagos pagos</h5>
                <p class="text-muted mb-0 small">registrados en total</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="icon-container bg-success bg-opacity-10">
                        <i class="bi bi-graph-up-arrow text-success"></i>
                    </div>
                    <span class="badge bg-success bg-opacity-10 text-success px-2 py-1">Ingresos</span>
                </div>
                <h5 class="fw-bold mb-1">S/ @Model.TotalIngresos.ToString("N2")</h5>
                <p class="text-muted mb-0 small">ingresos totales</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="icon-container bg-info bg-opacity-10">
                        <i class="bi bi-calendar-check text-info"></i>
                    </div>
                    <span class="badge bg-info bg-opacity-10 text-info px-2 py-1">Este mes</span>
                </div>
                <h5 class="fw-bold mb-1">S/ @Model.IngresosMes.ToString("N2")</h5>
                <p class="text-muted mb-0 small">ingresos del mes actual</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="icon-container bg-warning bg-opacity-10">
                        <i class="bi bi-credit-card text-warning"></i>
                    </div>
                    <span class="badge bg-warning bg-opacity-10 text-warning px-2 py-1">Tipos de pago</span>
                </div>
                <h5 class="fw-bold mb-1">@Model.TiposPago.Count() tipos</h5>
                <p class="text-muted mb-0 small">de medios de pago</p>
            </div>
        </div>
    </div>
</div>

<!-- Filtros y búsqueda -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-3">
        <form method="get" id="filterForm">
            <div class="row g-2 align-items-center">
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-light">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-light bg-light" 
                               placeholder="Buscar por reserva" 
                               asp-for="SearchTerm">
                    </div>
                </div>
                
                <div class="col-md-3">
                    <select class="form-select border-light bg-light" asp-for="TipoPagoFilter">
                        <option value="">Todos los tipos de pago</option>
                        @foreach (var tipoPago in Model.TiposPago)
                        {
                            <option value="@tipoPago.Id">@tipoPago.Nombre</option>
                        }
                    </select>
                </div>
                
                <div class="col-md-2">
                    <select class="form-select border-light bg-light" asp-for="DateFilter">
                        <option value="">Cualquier fecha</option>
                        <option value="today">Hoy</option>
                        <option value="week">Última semana</option>
                        <option value="month">Último mes</option>
                        <option value="year">Este año</option>
                    </select>
                </div>
                
                <div class="col-md-1">
                    <button type="button" id="clearFilters" class="btn btn-secondary w-100" title="Limpiar filtros">
                        <i class="bi bi-arrow-counterclockwise"></i>
                    </button>
                </div>
                
                <div class="col-md-1">
                    <button class="btn btn-primary w-100" type="submit" title="Filtrar">
                        <i class="bi bi-funnel-fill"></i>
                    </button>
                </div>
                
                <div class="col-md-2 ms-auto">
                    <button class="btn btn-success w-100" type="button" data-bs-toggle="modal" data-bs-target="#newPaymentModal">
                        <i class="bi bi-plus-circle me-1"></i> Nuevo Pago
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Tabla de pagos -->
<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0" id="paymentsTable">
                <thead class="bg-light text-dark">
                    <tr>
                        <th class="ps-4">ID</th>
                        <th>Reserva</th>
                        <th>Tipo de Pago</th>
                        <th class="text-end">Monto</th>
                        <th class="text-center">Fecha</th>
                        <th class="text-end pe-4">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Payments != null && Model.Payments.Any())
                    {
                        @foreach (var payment in Model.Payments)
                        {
                            <tr>
                                <td class="ps-4">
                                    <span class="fw-medium">@payment.Id.ToString().Substring(0, 8)...</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-calendar-event text-primary me-2"></i>
                                        <div>
                                            <span class="d-block fw-medium">@payment.NombreReserva</span>
                                            <small class="text-muted">ID: @payment.IdReserva</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var badgeClass = payment.TipoPagoNombre switch
                                        {
                                            "Efectivo" => "bg-success bg-opacity-10 text-success",
                                            "Tarjeta de Crédito" => "bg-primary bg-opacity-10 text-primary",
                                            "Transferencia" => "bg-info bg-opacity-10 text-info",
                                            "Depósito" => "bg-warning bg-opacity-10 text-warning",
                                            _ => "bg-secondary bg-opacity-10 text-secondary"
                                        };
                                    }
                                    <span class="badge @badgeClass px-3 py-2">@payment.TipoPagoNombre</span>
                                </td>
                                <td class="text-end">
                                    <span class="fw-bold">S/ @payment.Monto.ToString("N2")</span>
                                </td>
                                <td class="text-center">
                                    @DateTime.Now.AddDays(-new Random().Next(1, 30)).ToString("dd/MM/yyyy")
                                </td>
                                <td class="text-end pe-4">
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-secondary edit-payment-btn" 
                                                data-bs-toggle="tooltip" 
                                                data-bs-title="Editar pago" 
                                                data-id="@payment.Id"
                                                data-reserva-id="@payment.IdReserva"
                                                data-tipo-pago-id="@payment.IdTipoPago"
                                                data-monto="@payment.Monto"
                                                data-nombre-reserva="@payment.NombreReserva"
                                                data-tipo-pago-nombre="@payment.TipoPagoNombre">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger delete-payment-btn" 
                                                data-bs-toggle="tooltip" 
                                                data-bs-title="Eliminar pago" 
                                                data-id="@payment.Id"
                                                data-reserva="@payment.NombreReserva">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                        <a href="/Reservas?id=@payment.IdReserva" class="btn btn-sm btn-outline-primary" 
                                           data-bs-toggle="tooltip" 
                                           data-bs-title="Ver reserva">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center py-5">
                                <div class="d-flex flex-column align-items-center py-5">
                                    <i class="bi bi-cash-stack text-muted" style="font-size: 3rem;"></i>
                                    <h5 class="mt-3">No se encontraron pagos</h5>
                                    <p class="text-muted mb-4">Prueba ajustando los filtros o registra un nuevo pago</p>
                                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newPaymentModal">
                                        <i class="bi bi-plus-circle me-2"></i>Nuevo Pago
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Paginación -->
@if (Model.Payments != null && Model.Payments.Any())
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div>
            <span class="text-muted">Mostrando <span class="fw-medium">@Model.Payments.Count</span> de <span class="fw-medium">@Model.TotalPagos</span> pagos</span>
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination mb-0">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage-1)&searchTerm=@Model.SearchTerm&tipoPagoFilter=@Model.TipoPagoFilter&dateFilter=@Model.DateFilter" aria-label="Previous">
                        <span aria-hidden="true">«</span>
                    </a>
                </li>
                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i&searchTerm=@Model.SearchTerm&tipoPagoFilter=@Model.TipoPagoFilter&dateFilter=@Model.DateFilter">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage+1)&searchTerm=@Model.SearchTerm&tipoPagoFilter=@Model.TipoPagoFilter&dateFilter=@Model.DateFilter" aria-label="Next">
                        <span aria-hidden="true">»</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
}

<!-- Modal para Nuevo Pago -->
<partial name="_NewPaymentModal" model="Model" />

<!-- Modal para Editar Pago -->
<partial name="_EditPaymentModal" model="Model" />

<!-- Modal de confirmación para eliminar -->
<partial name="_DeletePaymentModal" />

<style>
    .icon-container {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
    }
    
    .icon-container i {
        font-size: 1.2rem;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializar tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Función para mostrar alertas
            function showAlert(message, type = 'info') {
                const alertContainer = document.getElementById('alertContainer');
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                alertContainer.appendChild(alertDiv);
                
                // Auto cerrar después de 5 segundos
                setTimeout(() => {
                    const alert = bootstrap.Alert.getOrCreateInstance(alertDiv);
                    alert.close();
                }, 5000);
            }
            
            // Botón para limpiar filtros
            document.getElementById('clearFilters')?.addEventListener('click', function() {
                document.getElementById('SearchTerm').value = '';
                document.getElementById('TipoPagoFilter').value = '';
                document.getElementById('DateFilter').value = '';
                document.getElementById('filterForm').submit();
            });
            
            // Cargar reservas para el select
            loadReservaciones();
            
            // Botón para guardar nuevo pago
            document.getElementById('saveNewPayment')?.addEventListener('click', function() {
                saveNewPayment();
            });
            
            // Botones para editar pago
            document.querySelectorAll('.edit-payment-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const paymentId = this.dataset.id;
                    const reservaId = this.dataset.reservaId;
                    const tipoPagoId = this.dataset.tipoPagoId;
                    const monto = this.dataset.monto;
                    const nombreReserva = this.dataset.nombreReserva;
                    const tipoPagoNombre = this.dataset.tipoPagoNombre;
                    
                    // Llenar el formulario de edición
                    document.getElementById('editPaymentId').value = paymentId;
                    document.getElementById('editReservationName').textContent = nombreReserva;
                    document.getElementById('editPaymentType').value = tipoPagoId;
                    document.getElementById('editAmount').value = monto;
                    
                    // Mostrar el modal
                    const editModal = new bootstrap.Modal(document.getElementById('editPaymentModal'));
                    editModal.show();
                });
            });
            
            // Botón para guardar edición de pago
            document.getElementById('saveEditPayment')?.addEventListener('click', function() {
                updatePayment();
            });
            
            // Botones para eliminar pago
            document.querySelectorAll('.delete-payment-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const paymentId = this.dataset.id;
                    const reservaNombre = this.dataset.reserva;
                    
                    // Configurar el modal de confirmación
                    document.getElementById('deletePaymentId').value = paymentId;
                    document.getElementById('deletePaymentReservation').textContent = reservaNombre;
                    
                    // Mostrar el modal
                    const deleteModal = new bootstrap.Modal(document.getElementById('deletePaymentModal'));
                    deleteModal.show();
                });
            });
            
            // Botón para confirmar eliminación
            document.getElementById('confirmDeletePayment')?.addEventListener('click', function() {
                deletePayment();
            });
            
            // Función para cargar reservaciones
            async function loadReservaciones() {
                try {
                    const response = await fetch('/api/reservations');
                    if (!response.ok) throw new Error('Error al cargar reservaciones');
                    
                    const reservaciones = await response.json();
                    
                    // Llenar el select de reservaciones
                    const reservationSelect = document.getElementById('reservationSelect');
                    
                    if (reservationSelect && reservaciones.length > 0) {
                        reservaciones.forEach(reserva => {
                            const option = document.createElement('option');
                            option.value = reserva.id;
                            option.textContent = `${reserva.nombreEvento} - ${new Date(reserva.fechaEjecucion).toLocaleDateString()}`;
                            reservationSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }
            
            // Función para crear nuevo pago
            async function saveNewPayment() {
                try {
                    const reservationId = document.getElementById('reservationSelect').value;
                    const paymentTypeId = document.getElementById('paymentType').value;
                    const amount = document.getElementById('amount').value;
                    
                    if (!reservationId || reservationId === "0") {
                        alert('Por favor seleccione una reserva');
                        return;
                    }
                    
                    if (!paymentTypeId || paymentTypeId === "0") {
                        alert('Por favor seleccione un tipo de pago');
                        return;
                    }
                    
                    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
                        alert('Por favor ingrese un monto válido');
                        return;
                    }
                    
                    const paymentData = {
                        idReserva: reservationId,
                        idTipoPago: paymentTypeId,
                        monto: amount.toString()
                    };
                    
                    // Obtener el token CSRF
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    // Deshabilitar el botón y mostrar spinner
                    const saveButton = document.getElementById('saveNewPayment');
                    const originalText = saveButton.innerHTML;
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';
                    
                    const response = await fetch('/Pagos?handler=CreatePayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(paymentData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Cerrar el modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('newPaymentModal'));
                        modal.hide();
                        
                        // Mostrar mensaje de éxito
                        showAlert('Pago registrado correctamente', 'success');
                        
                        // Recargar la página después de un breve delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showAlert(`Error: ${result.message || 'No se pudo registrar el pago'}`, 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('Ha ocurrido un error al procesar la solicitud', 'danger');
                } finally {
                    // Restaurar el botón
                    const saveButton = document.getElementById('saveNewPayment');
                    saveButton.disabled = false;
                    saveButton.innerHTML = 'Guardar Pago';
                }
            }
            
            // Función para actualizar pago
            async function updatePayment() {
                try {
                    const paymentId = document.getElementById('editPaymentId').value;
                    const paymentTypeId = document.getElementById('editPaymentType').value;
                    const amount = document.getElementById('editAmount').value;
                    
                    if (!paymentTypeId || paymentTypeId === "0") {
                        alert('Por favor seleccione un tipo de pago');
                        return;
                    }
                    
                    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
                        alert('Por favor ingrese un monto válido');
                        return;
                    }
                    
                    const paymentData = {
                        id: paymentId,
                        idTipoPago: paymentTypeId,
                        monto: amount.toString()
                    };
                    
                    // Obtener el token CSRF
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    // Deshabilitar el botón y mostrar spinner
                    const saveButton = document.getElementById('saveEditPayment');
                    const originalText = saveButton.innerHTML;
                    saveButton.disabled = true;
                    saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';
                    
                    const response = await fetch('/Pagos?handler=UpdatePayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(paymentData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Cerrar el modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editPaymentModal'));
                        modal.hide();
                        
                        // Mostrar mensaje de éxito
                        showAlert('Pago actualizado correctamente', 'success');
                        
                        // Recargar la página después de un breve delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showAlert(`Error: ${result.message || 'No se pudo actualizar el pago'}`, 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('Ha ocurrido un error al procesar la solicitud', 'danger');
                } finally {
                    // Restaurar el botón
                    const saveButton = document.getElementById('saveEditPayment');
                    saveButton.disabled = false;
                    saveButton.innerHTML = 'Guardar Cambios';
                }
            }
            
            // Función para eliminar pago
            async function deletePayment() {
                try {
                    const paymentId = document.getElementById('deletePaymentId').value;
                    
                    // Obtener el token CSRF
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    // Deshabilitar el botón y mostrar spinner
                    const deleteButton = document.getElementById('confirmDeletePayment');
                    const originalText = deleteButton.innerHTML;
                    deleteButton.disabled = true;
                    deleteButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Eliminando...';
                    
                    const response = await fetch('/Pagos?handler=DeletePayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ id: paymentId })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Cerrar el modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('deletePaymentModal'));
                        modal.hide();
                        
                        // Mostrar mensaje de éxito
                        showAlert('Pago eliminado correctamente', 'success');
                        
                        // Recargar la página después de un breve delay
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showAlert(`Error: ${result.message || 'No se pudo eliminar el pago'}`, 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('Ha ocurrido un error al procesar la solicitud', 'danger');
                } finally {
                    // Restaurar el botón
                    const deleteButton = document.getElementById('confirmDeletePayment');
                    deleteButton.disabled = false;
                    deleteButton.innerHTML = 'Eliminar Pago';
                }
            }
        });
    </script>
}
