@page
@model gestor_eventos.Pages.Servicios.IndexModel
@{
    ViewData["Title"] = "Gestión de Servicios";
}

@Html.AntiForgeryToken()

<!-- Add this script tag with service data -->
<script>
    // Store all services data for client-side use
    const serviciosData = @Json.Serialize(Model.Servicios);
</script>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newServiceModal">
            <i class="bi bi-plus-circle"></i> Nuevo Servicio
        </button>
    </div>

    @if (!string.IsNullOrEmpty(Model.SuccessMessage) || !string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["success"]))
    {
        var message = Model.SuccessMessage ?? ViewContext.HttpContext.Request.Query["success"].ToString();
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.HasError)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
        </div>
    }

    @if (!Model.Servicios.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> No se encontraron servicios registrados.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var servicio in Model.Servicios)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0 text-truncate" title="@servicio.NombreServicio">
                                @servicio.NombreServicio
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@servicio.Descripcion</p>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="badge bg-info text-dark">
                                    <i class="bi bi-box-seam me-1"></i> @servicio.TotalItems @(servicio.TotalItems == 1 ? "ítem" : "ítems")
                                </span>
                                <span class="fw-bold text-primary">S/ @servicio.PrecioBase.ToString("N2")</span>
                            </div>
                            
                            @if (servicio.Items.Any())
                            {
                                <div class="small">
                                    <h6 class="border-bottom pb-1 mb-2">Ítems incluidos:</h6>
                                    <ul class="list-unstyled mb-0">
                                        @foreach (var item in servicio.Items)
                                        {
                                            <li class="mb-1">
                                                <i class="bi bi-dot"></i> @item.NombreItem 
                                                <span class="text-muted">(@item.Cantidad)</span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-white border-top-0">
                            <div class="btn-group w-100">
                                <a href="#" class="btn btn-sm btn-outline-primary edit-service" 
   data-service-id="@servicio.Id">
    <i class="bi bi-pencil"></i> Editar
</a>
                                <!-- Reemplazar el botón de eliminar existente en las tarjetas de servicio -->
<button class="btn btn-sm btn-outline-danger btn-delete-service" 
        data-service-id="@servicio.Id" 
        data-service-name="@servicio.NombreServicio">
    <i class="bi bi-trash"></i> Eliminar
</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@await Html.PartialAsync("_NewServiceModal")
@await Html.PartialAsync("_EditServiceModal")
@await Html.PartialAsync("_DeleteConfirmModal")

@section Scripts {
    <script>
        // Variables globales para mantener el estado
        let selectedItems = [];
        let serviceToEdit = null; // Almacenará el servicio que se está editando
        let currentItems = []; // Ítems actuales del servicio
        let itemsToRemove = []; // IDs de ítems a eliminar
        let newItems = []; // Nuevos ítems a agregar

        $(document).ready(function() {
            // Mostrar mensaje de éxito si existe
            const urlParams = new URLSearchParams(window.location.search);
            const successMessage = urlParams.get('success');
            if (successMessage) {
                showAlert('success', decodeURIComponent(successMessage));
            }

            // Agregar ítem a la lista de seleccionados
            $('#addSelectedItemBtn').on('click', function() {
                const itemSelect = $('#itemSelect');
                const selectedOption = itemSelect.find('option:selected');
                const itemId = itemSelect.val();
                const itemQuantity = parseInt($('#itemQuantity').val());
                const itemState = $('#itemState').val(); // Obtener el estado seleccionado
                
                if (!itemId) {
                    showAlert('warning', 'Por favor selecciona un ítem');
                    return;
                }
                
                if (isNaN(itemQuantity) || itemQuantity < 1) {
                    showAlert('warning', 'La cantidad debe ser al menos 1');
                    return;
                }
                
                const itemStock = parseInt(selectedOption.data('stock'));
                if (itemQuantity > itemStock) {
                    showAlert('warning', `Solo hay ${itemStock} unidades disponibles`);
                    return;
                }
                
                const existingItem = selectedItems.find(item => item.id === itemId);
                if (existingItem) {
                    showAlert('warning', 'Este ítem ya ha sido agregado');
                    return;
                }
                
                const item = {
                    id: itemId,
                    nombre: selectedOption.data('nombre'),
                    estado: itemState, // Guardar el estado seleccionado
                    stock: itemStock,
                    cantidad: itemQuantity,
                    precio: selectedOption.data('precio')
                };
                
                selectedItems.push(item);
                updateItemsTable();
                updateSaveButtonState();
                
                itemSelect.val('');
                $('#itemQuantity').val(1);
                $('#itemState').val('Nuevo'); // Resetear el selector de estado
                
                showAlert('success', 'Ítem agregado al servicio');
            });

            // Actualizar la tabla de ítems seleccionados
            function updateItemsTable() {
                const itemsTableBody = $('#itemsTableBody');
                const noItemsRow = $('#noItemsRow');
                const itemsCountBadge = $('#itemsCountBadge');
                
                if (selectedItems.length > 0) {
                    itemsTableBody.empty();
                    noItemsRow.hide();
                    
                    selectedItems.forEach(function(item, index) {
                        // Determinar el color de la insignia según el estado
                        let badgeClass = 'bg-success';
                        if (item.estado === 'Dañado') {
                            badgeClass = 'bg-warning text-dark';
                        } else if (item.estado === 'Roto') {
                            badgeClass = 'bg-danger';
                        }
                        
                        const row = $(`
                            <tr data-item-id="${item.id}">
                                <td>${item.nombre}</td>
                                <td><span class="badge ${badgeClass}">${item.estado}</span></td>
                                <td>${item.stock}</td>
                                <td>
                                    <input type="number" class="form-control form-control-sm item-quantity" 
                                           min="1" max="${item.stock}" value="${item.cantidad}" style="width: 70px">
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-secondary edit-state" data-index="${index}">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger remove-item" data-index="${index}">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `);
                        
                        itemsTableBody.append(row);
                        
                        row.find('.item-quantity').on('change', function() {
                            const newQuantity = parseInt($(this).val());
                            if (newQuantity > 0 && newQuantity <= item.stock) {
                                selectedItems[index].cantidad = newQuantity;
                            } else {
                                $(this).val(item.cantidad);
                                showAlert('warning', `La cantidad debe estar entre 1 y ${item.stock}`);
                            }
                        });
                        
                        row.find('.edit-state').on('click', function() {
                            const itemIndex = $(this).data('index');
                            const currentState = selectedItems[itemIndex].estado;
                            
                            // Crear un dropdown para editar el estado
                            const stateSelect = $(`
                                <select class="form-select form-select-sm state-select">
                                    <option value="Nuevo" ${currentState === 'Nuevo' ? 'selected' : ''}>Nuevo</option>
                                    <option value="Dañado" ${currentState === 'Dañado' ? 'selected' : ''}>Dañado</option>
                                    <option value="Roto" ${currentState === 'Roto' ? 'selected' : ''}>Roto</option>
                                </select>
                            `);
                            
                            // Reemplazar la insignia con el selector
                            const cell = $(this).closest('tr').find('td:eq(1)');
                            const badge = cell.html();
                            cell.html(stateSelect);
                            
                            // Manejar cambio del selector
                            stateSelect.on('change', function() {
                                selectedItems[itemIndex].estado = $(this).val();
                                updateItemsTable();
                            });
                            
                            // Manejar clic fuera del selector
                            stateSelect.on('blur', function() {
                                cell.html(badge);
                            });
                            
                            stateSelect.focus();
                        });
                        
                        row.find('.remove-item').on('click', function() {
                            const itemIndex = $(this).data('index');
                            selectedItems.splice(itemIndex, 1);
                            updateItemsTable();
                            updateSaveButtonState();
                            showAlert('info', 'Ítem eliminado del servicio');
                        });
                    });
                    
                    itemsCountBadge.text(`${selectedItems.length} ítems`);
                } else {
                    itemsTableBody.empty();
                    noItemsRow.show();
                    itemsCountBadge.text('0 ítems');
                }
            }

            // Actualizar estado del botón de guardar según validación
            function updateSaveButtonState() {
                if (selectedItems.length === 0) {
                    $('#itemsTable').addClass('border border-danger');
                    $('#itemsHelp').removeClass('d-none');
                    $('#saveServiceBtn').prop('disabled', true);
                } else {
                    $('#itemsTable').removeClass('border border-danger');
                    $('#itemsHelp').addClass('d-none');
                    $('#saveServiceBtn').prop('disabled', false);
                }
            }

            // Guardar el servicio
            $('#saveServiceBtn').on('click', async function() {
                const button = $(this);
                const serviceName = $('#serviceName').val();
                const serviceDescription = $('#serviceDescription').val();
                const servicePrice = $('#servicePrice').val();
                
                // Validación básica
                if (!serviceName || !serviceDescription || !servicePrice || selectedItems.length === 0) {
                    if (!serviceName) {
                        $('#serviceName').addClass('is-invalid');
                    }
                    if (!serviceDescription) {
                        $('#serviceDescription').addClass('is-invalid');
                    }
                    if (!servicePrice) {
                        $('#servicePrice').addClass('is-invalid');
                    }
                    if (selectedItems.length === 0) {
                        $('#itemsTable').addClass('border border-danger');
                        $('#itemsHelp').removeClass('d-none');
                    }
                    
                    showAlert('warning', 'Por favor completa todos los campos requeridos');
                    return;
                }
                
                try {
                    button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...');
                    button.prop('disabled', true);
                    
                    // Preparar los items para el API
                    const items = selectedItems.map(item => ({
                        inventarioId: item.id,
                        cantidad: item.cantidad,
                        estado: item.estado,
                        precioActual: String(item.precio) // Make sure this is a string
                    }));
                    
                    // Preparar los datos del servicio
                    const serviceData = {
                        nombreServicio: serviceName,
                        descripcion: serviceDescription,
                        precioBase: parseFloat(servicePrice),
                        items: items
                    };
                    
                    console.log('Enviando datos:', serviceData);
                    
                    // Get antiforgery token
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    
                    // Use the page handler
                    const response = await fetch('/Servicios', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(serviceData)
                    });
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Response error:', response.status, errorText);
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }
                    
                    const result = await response.json();
                    
                    // Cerrar el modal
                    $('#newServiceModal').modal('hide');
                    
                    // Mostrar mensaje de éxito
                    showAlert('success', `Servicio "${serviceName}" creado exitosamente`);
                    
                    // Recargar la página después de un breve retraso
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    
                } catch (error) {
                    console.error('Error al guardar el servicio:', error);
                    showAlert('error', error.message || 'Ocurrió un error al guardar el servicio');
                } finally {
                    button.html('<i class="bi bi-save"></i> Guardar Servicio');
                    button.prop('disabled', false);
                }
            });
            
            // Helper function to get cookies
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return '';
            }
            
            // Reset del modal al cerrarse
            $('#newServiceModal').on('hidden.bs.modal', function () {
                $('#newServiceForm')[0].reset();
                selectedItems = [];
                updateItemsTable();
                
                // Limpiar validaciones
                $('#serviceName').removeClass('is-invalid');
                $('#serviceDescription').removeClass('is-invalid');
                $('#servicePrice').removeClass('is-invalid');
                $('#itemsTable').removeClass('border border-danger');
                $('#itemsHelp').addClass('d-none');
            });
            
            // Función para mostrar alertas
function showAlert(type, message) {
    // Determinar la clase de estilo según el tipo
    let alertClass = 'alert-info';
    let icon = 'bi-info-circle-fill';
    
    if (type === 'success') {
        alertClass = 'alert-success';
        icon = 'bi-check-circle-fill';
    } else if (type === 'error') {
        alertClass = 'alert-danger';
        icon = 'bi-exclamation-triangle-fill';
    } else if (type === 'warning') {
        alertClass = 'alert-warning';
        icon = 'bi-exclamation-circle-fill';
    }
    
    // Crear el elemento de alerta
    const alertHtml = `
        <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
            <i class="bi ${icon} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    
    // Insertar la alerta al principio del contenedor
    const alertContainer = document.createElement('div');
    alertContainer.innerHTML = alertHtml;
    const container = document.querySelector('.container.py-4');
    container.insertBefore(alertContainer.firstElementChild, container.firstElementChild.nextSibling);
    
    // Auto-cerrar después de 5 segundos
    setTimeout(() => {
        const insertedAlert = document.querySelector(`.${alertClass}.alert-dismissible`);
        if (insertedAlert) {
            const bsAlert = new bootstrap.Alert(insertedAlert);
            bsAlert.close();
        }
    }, 5000);
}

            // Manejar clic en botón de editar
            $(document).on('click', '.edit-service', function(e) {
                e.preventDefault();
                
                const serviceId = $(this).data('service-id');
                console.log("Editando servicio ID:", serviceId);
                
                try {
                    // Find the service in the pre-loaded data
                    const servicio = serviciosData.find(s => s.id === serviceId);
                    
                    if (!servicio) {
                        throw new Error(`Servicio con ID ${serviceId} no encontrado`);
                    }
                    
                    console.log("Detalles del servicio:", servicio);
                    
                    // Store service data for later use
                    serviceToEdit = servicio;
                    
                    // Reset items collections
                    currentItems = [...servicio.items];
                    itemsToRemove = [];
                    newItems = [];
                    
                    // Populate form fields
                    $('#editServiceId').val(servicio.id);
                    $('#editServiceName').val(servicio.nombreServicio);
                    $('#editServiceDescription').val(servicio.descripcion);
                    $('#editServicePrice').val(servicio.precioBase);
                    
                    // Populate current items table
                    updateCurrentItemsTable();
                    
                    // Fetch and populate available inventory items
                    loadAvailableInventoryItems();
                    
                    // Show modal
                    const editModal = new bootstrap.Modal(document.getElementById('editServiceModal'));
                    editModal.show();
                    
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('error', error.message || 'Ocurrió un error al cargar los detalles del servicio');
                }
            });
            
            // Load available inventory items for edit modal
            function loadAvailableInventoryItems() {
                try {
                    // Clear the select element
                    const itemSelect = $('#editItemSelect');
                    itemSelect.empty();
                    itemSelect.append('<option value="" selected>-- Selecciona un ítem --</option>');
                    
                    // Use inventory items from page model
                    const inventoryItems = @Json.Serialize(Model.InventarioItems);
                    
                    // Add options for each available item that's not already in the service
                    inventoryItems.forEach(item => {
                        // Skip items that are already in the service
                        const alreadyInService = currentItems.some(ci => ci.inventarioId === item.id);
                        
                        if (item.stockDisponible > 0 && !alreadyInService) {
                            itemSelect.append(`
                                <option value="${item.id}" 
                                        data-nombre="${item.nombre}" 
                                        data-precio="${item.precioBase}" 
                                        data-stock="${item.stockDisponible}">
                                    ${item.nombre} (${item.stockDisponible} disponibles)
                                </option>
                            `);
                        }
                    });
                } catch (error) {
                    console.error('Error loading inventory items:', error);
                    showAlert('error', 'No se pudieron cargar los ítems de inventario disponibles');
                }
            }
            
            // Update the current items table in edit modal
            function updateCurrentItemsTable() {
                const tbody = $('#currentItemsTableBody');
                const noItemsRow = $('#noCurrentItemsRow');
                
                tbody.empty();
                
                if (currentItems.length === 0) {
                    tbody.html(`
                        <tr id="noCurrentItemsRow">
                            <td colspan="4" class="text-center text-muted">
                                <i class="bi bi-info-circle me-2"></i>
                                Este servicio no tiene ítems asignados
                            </td>
                        </tr>
                    `);
                    return;
                }
                
                // Add each item to the table
                currentItems.forEach((item, index) => {
                    // Determine badge class based on state
                    let badgeClass = 'bg-success';
                    if (item.estado === 'Dañado') {
                        badgeClass = 'bg-warning text-dark';
                    } else if (item.estado === 'Roto') {
                        badgeClass = 'bg-danger';
                    }
                    
                    const row = $(`
                        <tr data-item-id="${item.id}">
                            <td>${item.nombreItem}</td>
                            <td><span class="badge ${badgeClass}">${item.estado}</span></td>
                            <td>${item.cantidad}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-current-item" 
                                        data-index="${index}" data-id="${item.id}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `);
                    
                    tbody.append(row);
                });
                
                // Handle item removal
                $('.remove-current-item').on('click', function() {
                    const index = $(this).data('index');
                    const itemId = $(this).data('id');
                    
                    // Add to items to remove list
                    itemsToRemove.push(itemId);
                    
                    // Remove from current items array
                    currentItems.splice(index, 1);
                    
                    // Update table
                    updateCurrentItemsTable();
                    showAlert('info', 'Ítem eliminado del servicio');
                });
            }
            
            // Add new item to service in edit mode
            $('#addEditItemBtn').on('click', function() {
                const itemSelect = $('#editItemSelect');
                const selectedOption = itemSelect.find('option:selected');
                const itemId = itemSelect.val();
                const itemQuantity = parseInt($('#editItemQuantity').val());
                const itemState = $('#editItemState').val();
                
                if (!itemId) {
                    showAlert('warning', 'Por favor selecciona un ítem');
                    return;
                }
                
                if (isNaN(itemQuantity) || itemQuantity < 1) {
                    showAlert('warning', 'La cantidad debe ser al menos 1');
                    return;
                }
                
                const itemStock = parseInt(selectedOption.data('stock'));
                if (itemQuantity > itemStock) {
                    showAlert('warning', `Solo hay ${itemStock} unidades disponibles`);
                    return;
                }
                
                // Check if item already exists in new items
                if (newItems.some(item => item.inventarioId === itemId)) {
                    showAlert('warning', 'Este ítem ya ha sido agregado');
                    return;
                }
                
                const item = {
                    inventarioId: itemId,
                    nombreItem: selectedOption.data('nombre'),
                    estado: itemState,
                    stockDisponible: itemStock,
                    cantidad: itemQuantity,
                    precioActual: selectedOption.data('precio')
                };
                
                newItems.push(item);
                updateNewItemsTable();
                
                itemSelect.val('');
                $('#editItemQuantity').val(1);
                $('#editItemState').val('Nuevo');
                
                showAlert('success', 'Ítem agregado al servicio');
            });
            
            // Update new items table in edit mode
            function updateNewItemsTable() {
                const tbody = $('#newItemsTableBody');
                const noItemsRow = $('#noNewItemsRow');
                const itemsCountBadge = $('#newItemsCountBadge');
                
                tbody.empty();
                
                if (newItems.length === 0) {
                    tbody.html(`
                        <tr id="noNewItemsRow">
                            <td colspan="5" class="text-center text-muted">
                                <i class="bi bi-info-circle me-2"></i>
                                No hay ítems nuevos agregados
                            </td>
                        </tr>
                    `);
                    itemsCountBadge.text('0 ítems nuevos');
                    return;
                }
                
                // Add each new item to the table
                newItems.forEach((item, index) => {
                    // Determine badge class based on state
                    let badgeClass = 'bg-success';
                    if (item.estado === 'Dañado') {
                        badgeClass = 'bg-warning text-dark';
                    } else if (item.estado === 'Roto') {
                        badgeClass = 'bg-danger';
                    }
                    
                    const row = $(`
                        <tr>
                            <td>${item.nombreItem}</td>
                            <td><span class="badge ${badgeClass}">${item.estado}</span></td>
                            <td>${item.stockDisponible}</td>
                            <td>
                                <input type="number" class="form-control form-control-sm new-item-quantity" 
                                       min="1" max="${item.stockDisponible}" value="${item.cantidad}" style="width: 70px"
                                       data-index="${index}">
                            </td>
                            <td>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-new-item" data-index="${index}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `);
                    
                    tbody.append(row);
                });
                
                itemsCountBadge.text(`${newItems.length} ítems nuevos`);
                
                // Handle new item quantity change
                $('.new-item-quantity').on('change', function() {
                    const index = $(this).data('index');
                    const newQuantity = parseInt($(this).val());
                    const maxStock = newItems[index].stockDisponible;
                    
                    if (newQuantity >= 1 && newQuantity <= maxStock) {
                        newItems[index].cantidad = newQuantity;
                    } else {
                        $(this).val(newItems[index].cantidad);
                        showAlert('warning', `La cantidad debe estar entre 1 y ${maxStock}`);
                    }
                });
                
                // Handle new item removal
                $('.remove-new-item').on('click', function() {
                    const index = $(this).data('index');
                    newItems.splice(index, 1);
                    updateNewItemsTable();
                    showAlert('info', 'Ítem eliminado');
                });
            }
            
            // Save edited service
            $('#saveEditServiceBtn').on('click', async function() {
                const button = $(this);
                const serviceId = $('#editServiceId').val();
                const serviceName = $('#editServiceName').val();
                const serviceDescription = $('#editServiceDescription').val();
                const servicePrice = $('#editServicePrice').val();
                
                // Basic validation
                if (!serviceName || !serviceDescription || !servicePrice) {
                    if (!serviceName) $('#editServiceName').addClass('is-invalid');
                    if (!serviceDescription) $('#editServiceDescription').addClass('is-invalid');
                    if (!servicePrice) $('#editServicePrice').addClass('is-invalid');
                    
                    showAlert('warning', 'Por favor completa todos los campos requeridos');
                    return;
                }
                
                try {
                    // Show loading indicator
                    button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...');
                    button.prop('disabled', true);
                    
                    // Prepare data for API
                    const serviceData = {
                        nombreServicio: serviceName,
                        descripcion: serviceDescription,
                        precioBase: parseFloat(servicePrice),
                        itemsToAdd: newItems.map(item => ({
                            inventarioId: item.inventarioId,
                            cantidad: item.cantidad,
                            estado: item.estado,
                            precioActual: String(item.precioActual)
                        })),
                        itemsToRemove: itemsToRemove
                    };
                    
                    console.log('Enviando datos de edición:', serviceData);
                    
                    // Get antiforgery token
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    
                    // Send update request - CORREGIR LA URL AQUÍ
                    const response = await fetch(`/api/servicios/${serviceId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(serviceData)
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }
                    
                    const result = await response.json();
                    
                    // Close modal
                    $('#editServiceModal').modal('hide');
                    
                    // Show success message
                    showAlert('success', `Servicio "${serviceName}" actualizado exitosamente`);
                    
                    // Reload page after delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    
                } catch (error) {
                    console.error('Error al actualizar el servicio:', error);
                    showAlert('error', error.message || 'Ocurrió un error al actualizar el servicio');
                } finally {
                    button.html('<i class="bi bi-save"></i> Guardar Cambios');
                    button.prop('disabled', false);
                }
            });
            
            // Reset edit modal on close
            $('#editServiceModal').on('hidden.bs.modal', function() {
                $('#editServiceForm')[0].reset();
                $('#currentItemsTableBody').empty();
                $('#newItemsTableBody').empty();
                $('#newItemsCountBadge').text('0 ítems nuevos');
                
                // Clear collections
                serviceToEdit = null;
                currentItems = [];
                itemsToRemove = [];
                newItems = [];
            });
            
            // Manejar clic en botón de eliminar
            $(document).on('click', '.btn-delete-service', function(e) {
                e.preventDefault();
                
                const serviceId = $(this).data('service-id');
                const serviceName = $(this).data('service-name');
                
                // Configurar el modal con la información del servicio
                $('#deleteServiceMessage').text(`¿Estás seguro de que deseas eliminar el servicio "${serviceName}"? Esta acción no se puede deshacer.`);
                $('#deleteServiceId').val(serviceId);
                
                // Guardar referencia al botón para usar en la función de confirmación
                $('#deleteServiceModal').data('button-element', this);
                
                // Mostrar modal de confirmación
                const deleteModal = new bootstrap.Modal(document.getElementById('deleteServiceModal'));
                deleteModal.show();
            });
            
            // Manejar la confirmación de eliminación
            $(document).on('click', '#confirmDeleteServiceBtn', async function() {
                const serviceId = $('#deleteServiceId').val();
                const buttonElement = $('#deleteServiceModal').data('button-element');
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteServiceModal'));
                
                try {
                    // Mostrar indicador de carga
                    const button = $(this);
                    const originalHtml = button.html();
                    button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Eliminando...');
                    button.prop('disabled', true);
                    
                    // Obtener token CSRF
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    
                    console.log('Eliminando servicio ID:', serviceId);
                    
                    // CORREGIR ESTA URL - Cambiar de /Servicios/ a /api/servicios/
                    const response = await fetch(`/api/servicios/${serviceId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }
                    
                    const result = await response.json();
                    
                    // Cerrar modal
                    modal.hide();
                    
                    // Mostrar mensaje de éxito
                    showAlert('success', result.message || 'Servicio eliminado correctamente');
                    
                    // Eliminar la tarjeta del servicio con animación
                    const serviceCard = $(buttonElement).closest('.col-md-6');
                    serviceCard.fadeOut('slow', function() {
                        serviceCard.remove();
                        
                        // Si no quedan servicios, mostrar mensaje
                        if ($('.card.shadow-sm').length === 0) {
                            $('.container.py-4').append(`
                                <div class="alert alert-info" role="alert">
                                    <i class="bi bi-info-circle-fill me-2"></i> No se encontraron servicios registrados.
                                </div>
                            `);
                        }
                    });
                    
                } catch (error) {
                    console.error('Error al eliminar el servicio:', error);
                    showAlert('error', error.message || 'Ocurrió un error al eliminar el servicio');
                } finally {
                    // Restaurar botón
                    const button = $('#confirmDeleteServiceBtn');
                    button.html('<i class="bi bi-trash"></i> Eliminar servicio');
                    button.prop('disabled', false);
                }
            });
        });
    </script>
}