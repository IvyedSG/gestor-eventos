<script>
 
    function showAlert(type, message) {
 
        const alertId = 'alert_' + Date.now();
        
 
        let alertClass = 'alert-info';
        let icon = 'info-circle-fill';
        
        switch(type) {
            case 'success':
                alertClass = 'alert-success';
                icon = 'check-circle-fill';
                break;
            case 'error':
                alertClass = 'alert-danger';
                icon = 'exclamation-triangle-fill';
                break;
            case 'warning':
                alertClass = 'alert-warning';
                icon = 'exclamation-triangle-fill';
                break;
        }
        
 
        const alertHtml = `
            <div id="${alertId}" class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="bi bi-${icon} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
 
        let alertContainer = $('#alertContainer');
        if (alertContainer.length === 0) {
            $('body').prepend('<div id="alertContainer" style="position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 350px;"></div>');
            alertContainer = $('#alertContainer');
        }
        
 
        alertContainer.append(alertHtml);
        
 
        setTimeout(() => {
            $(`#${alertId}`).alert('close');
        }, 5000);
    }

 
    let selectedItems = [];
    let editSelectedItems = [];
    let uploadedImages = [];
    let editUploadedImages = [];

    $(document).ready(function() {
 
        $('#eventTypeFilter').on('change', function() {
            filterServices();
        });

 
        $('#searchForm').on('submit', function(e) {
            e.preventDefault();
            filterServices();
        });

 
        $('#clearSearchBtn').on('click', function() {
            $('#searchInput').val('');
            filterServices();
        });

 
        function filterServices() {
            const searchTerm = $('#searchInput').val().toLowerCase();
            const eventType = $('#eventTypeFilter').val();

            $('.service-card').each(function() {
                const card = $(this);
                const serviceName = card.data('service-name').toLowerCase();
                const serviceDescription = card.data('service-description').toLowerCase();
                const serviceEventType = card.data('service-eventtype').toLowerCase();
                
 
                const matchesSearch = searchTerm === '' || 
                    serviceName.includes(searchTerm) || 
                    serviceDescription.includes(searchTerm);
                
                const matchesEventType = eventType === '' || 
                    serviceEventType.toLowerCase().includes(eventType.toLowerCase());
                
 
                if (matchesSearch && matchesEventType) {
                    card.parent().show();
                } else {
                    card.parent().hide();
                }
            });

 
            updateResultsCounter();
        }

        function updateResultsCounter() {
            const visibleCards = $('.service-card:visible').length;
            const resultsText = $('.text-muted strong');
            
            if (resultsText.length > 0) {
                resultsText.text(visibleCards);
            }
        }

 
        const urlParams = new URLSearchParams(window.location.search);
        const eventTypeParam = urlParams.get('EventTypeFilter');
        if (eventTypeParam) {
            $('#eventTypeFilter').val(eventTypeParam);
            filterServices(); // Aplicar filtro inicial
        }

 
 
        $('.edit-service-btn').click(function() {
            const card = $(this).closest('.service-card');
            
 
            const serviceId = card.attr('data-service-id');
            const serviceName = card.attr('data-service-name');
            const serviceDescription = card.attr('data-service-description');
            const servicePrice = card.attr('data-service-price');
            const serviceEventType = card.attr('data-service-eventtype');
            const serviceImage = card.attr('data-service-images'); // Ahora es una sola imagen
            
            console.log('Datos del servicio:', {
                id: serviceId,
                name: serviceName,
                description: serviceDescription,
                price: servicePrice,
                eventType: serviceEventType,
                image: serviceImage
            });

 
            $('#editServiceId').val(serviceId);
            $('#editServiceName').val(serviceName);
            $('#editServiceDescription').val(serviceDescription);
            $('#editServicePrice').val(servicePrice);
            $('#editServiceEventType').val(serviceEventType);
            $('#editServiceImageUrl').val(serviceImage).trigger('input'); // Esto activará la previsualización
            
 
 
            
 
            let serviceItems = [];
            try {
                const itemsJson = $(this).closest('.service-card').find('.service-items-data').text().trim();
                console.log('Items JSON:', itemsJson); // Debug para ver el JSON

                if (itemsJson) {
                    serviceItems = JSON.parse(itemsJson);
                    console.log('Items parsed:', serviceItems); // Debug para ver los items parseados
                }
            } catch (e) {
                console.error('Error parsing items:', e);
                serviceItems = [];
            }
            
 
            editUploadedImages = [];
            editSelectedItems = [];
            $('#editImagePreviewContainer').empty();
            $('#editItemsTableBody').empty();
            $('#editNoItemsRow').show();
            $('#editServiceForm')[0].reset();
            
 
            $('#editServiceId').val(serviceId);
            $('#editServiceName').val(serviceName);
            $('#editServiceDescription').val(serviceDescription);
            $('#editServicePrice').val(servicePrice);
            $('#editServiceEventType').val(serviceEventType);
            
 
            if (serviceItems && serviceItems.length > 0) {
                console.log('Cargando', serviceItems.length, 'items al editor');
                
 
                editSelectedItems = [];
                
                serviceItems.forEach(item => {
                    console.log('Processing item for editSelectedItems:', item);
                    
 
                    const processedItem = {
                        id: item.inventarioId || item.InventarioId,
                        nombre: item.nombreItem || item.NombreItem || 'Sin nombre',
                        cantidad: item.cantidad || item.Cantidad || 1,
                        stock: item.stockActual || item.StockActual || 1,
                        categoria: (item.categoriaItem || item.CategoriaItem || 'General'),
                        originalItemId: item.id || item.Id
                    };
                    
                    console.log('Processed item:', processedItem);
                    editSelectedItems.push(processedItem);
                });
                
 
                $('#editItemsCountBadge').text(`${editSelectedItems.length} ítems`);
                
 
                updateEditItemsTable();
                console.log('Items cargados en la tabla:', editSelectedItems.length);
            }
            
 
            updateEditSaveButtonState();
            $('#editServiceModal').modal('show');
        });
        
 
        const editImageDropzone = $('#editImageDropzone');
        const editImageInput = $('#editServiceImages');
        
        editImageDropzone.on('click', function() {
            editImageInput.click();
        });
        
        editImageDropzone.on('dragover', function(e) {
            e.preventDefault();
            $(this).addClass('border-primary');
        });
        
        editImageDropzone.on('dragleave', function() {
            $(this).removeClass('border-primary');
        });
        
        editImageDropzone.on('drop', function(e) {
            e.preventDefault();
            $(this).removeClass('border-primary');
            
            if (e.originalEvent.dataTransfer.files.length) {
                editImageInput[0].files = e.originalEvent.dataTransfer.files;
                handleEditImages(e.originalEvent.dataTransfer.files);
            }
        });
        
        editImageInput.on('change', function() {
            handleEditImages(this.files);
        });
        
        function handleEditImages(files) {
            if (!files || files.length === 0) return;
            
 
            const totalImages = editUploadedImages.length + files.length;
            if (totalImages > 5) {
                showAlert('warning', 'Solo se permiten hasta 5 imágenes por servicio');
                return;
            }
            
            Array.from(files).forEach(file => {
 
                if (!file.type.match('image.*')) {
                    showAlert('warning', 'Solo se permiten archivos de imagen');
                    return;
                }
                
 
                const imageId = 'img_' + Date.now() + '_' + Math.random().toString(36).substring(2, 15);
                
                const reader = new FileReader();
                reader.onload = function(e) {
 
                    editUploadedImages.push({
                        id: imageId,
                        file: file,
                        url: e.target.result,
                        isExisting: false
                    });
                    
 
                    const imagePreview = $(`
                        <div class="position-relative" id="wrapper_${imageId}" style="width: 100px; height: 100px; overflow: hidden; border-radius: 4px;">
                            <img src="${e.target.result}" class="img-fluid" style="width: 100%; height: 100%; object-fit: cover;">
                            <button type="button" class="btn-close position-absolute top-0 end-0 bg-white rounded-circle p-1 m-1" 
                                data-image-id="${imageId}" aria-label="Close"></button>
                        </div>
                    `);
                    
                    $('#editImagePreviewContainer').append(imagePreview);
                    
 
                    imagePreview.find('.btn-close').on('click', function() {
                        const deleteImageId = $(this).data('image-id');
                        $(`#wrapper_${deleteImageId}`).remove();
                        editUploadedImages = editUploadedImages.filter(img => img.id !== deleteImageId);
                    });
                };
                
                reader.readAsDataURL(file);
            });
        }
        
 
        $('#addEditSelectedItemBtn').on('click', function() {
            const itemSelect = $('#editItemSelect');
            const selectedOption = itemSelect.find('option:selected');
            const itemId = itemSelect.val();
            const itemQuantity = parseInt($('#editItemQuantity').val());
            
            if (!itemId) {
                showAlert('warning', 'Por favor selecciona un ítem');
                return;
            }
            
            if (isNaN(itemQuantity) || itemQuantity < 1) {
                showAlert('warning', 'La cantidad debe ser al menos 1');
                return;
            }
            
 
            const itemStock = parseInt(selectedOption.data('stock'));
            if (itemQuantity > itemStock) {
                showAlert('warning', `La cantidad no puede superar el stock disponible (${itemStock})`);
                return;
            }
            
 
            const existingItemIndex = editSelectedItems.findIndex(item => item.id === itemId);
            
            if (existingItemIndex >= 0) {
 
                showAlert('info', 'Este ítem ya está en la lista. Se ha actualizado la cantidad.');
                editSelectedItems[existingItemIndex].cantidad = itemQuantity;
            } else {
 
                editSelectedItems.push({
                    id: itemId,
                    nombre: selectedOption.data('nombre'),
                    cantidad: itemQuantity,
                    stock: itemStock,
                    categoria: selectedOption.data('categoria')
                });
            }
            
 
            updateEditItemsTable();
            updateEditSaveButtonState();
            
 
            itemSelect.val('');
            $('#editItemQuantity').val(1);
        });
        
 
        function updateEditItemsTable() {
            const itemsTableBody = $('#editItemsTableBody');
            const noItemsRow = $('#editNoItemsRow');
            
            console.log('Actualizando tabla con', editSelectedItems.length, 'items');
            
            if (editSelectedItems && editSelectedItems.length > 0) {
 
                itemsTableBody.empty();
                noItemsRow.hide();
                
 
                editSelectedItems.forEach(function(item, index) {
                    console.log('Agregando item a la tabla:', item);
                    
 
                    const row = $(`
                        <tr data-item-id="${item.id}">
                            <td>${item.nombre}</td>
                            <td><span class="badge bg-light text-dark border">${item.categoria || 'General'}</span></td>
                            <td class="text-center"><span class="badge bg-info text-dark">${item.stock}</span></td>
                            <td class="text-center">
                                <input type="number" class="form-control form-control-sm edit-item-quantity" 
                                    min="1" max="${item.stock}" value="${item.cantidad}" style="width: 70px;">
                            </td>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-danger remove-edit-item" data-index="${index}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `);
                    
 
                    itemsTableBody.append(row);
                    
 
                    row.find('.edit-item-quantity').on('change', function() {
                        const newQuantity = parseInt($(this).val());
                        if (newQuantity > 0 && newQuantity <= item.stock) {
                            editSelectedItems[index].cantidad = newQuantity;
                        } else {
                            $(this).val(item.cantidad);
                            showAlert('warning', `La cantidad debe estar entre 1 y ${item.stock}`);
                        }
                    });
                    
 
                    row.find('.remove-edit-item').on('click', function() {
                        const itemIndex = $(this).data('index');
                        editSelectedItems.splice(itemIndex, 1);
                        updateEditItemsTable();
                        updateEditSaveButtonState();
                        showAlert('info', 'Ítem eliminado del servicio');
                    });
                });
                
 
                $('#editItemsCountBadge').text(`${editSelectedItems.length} ítems`);
            } else {
 
                itemsTableBody.empty();
                noItemsRow.show();
                itemsTableBody.append(`
                    <tr id="editNoItemsRow">
                        <td colspan="5" class="text-center text-muted py-3">
                            No hay ítems seleccionados
                        </td>
                    </tr>
                `);
                $('#editItemsCountBadge').text('0 ítems');
            }
        }
        
 
        function validateEditServiceForm() {
            const serviceName = $('#editServiceName').val().trim();
            const serviceDescription = $('#editServiceDescription').val().trim();
            const servicePrice = $('#editServicePrice').val();
            const serviceEventType = $('#editServiceEventType').val();
            const serviceImageUrl = $('#editServiceImageUrl').val().trim();
            
            let isValid = true;
            let errorMessage = '';
            
 
            if (!serviceName) {
                $('#editServiceName').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Nombre del servicio<br>';
            } else {
                $('#editServiceName').removeClass('is-invalid');
            }
            
 
            if (!serviceDescription) {
                $('#editServiceDescription').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Descripción<br>';
            } else {
                $('#editServiceDescription').removeClass('is-invalid');
            }
            
 
            if (!servicePrice || isNaN(servicePrice) || parseFloat(servicePrice) <= 0) {
                $('#editServicePrice').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Precio válido<br>';
            } else {
                $('#editServicePrice').removeClass('is-invalid');
            }
            
 
            if (!serviceEventType) {
                $('#editServiceEventType').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Tipo de evento<br>';
            } else {
                $('#editServiceEventType').removeClass('is-invalid');
            }
            
 
            if (!serviceImageUrl) {
                $('#editServiceImageUrl').addClass('is-invalid');
                isValid = false;
                errorMessage += '- URL de la imagen<br>';
            } else {
                $('#editServiceImageUrl').removeClass('is-invalid');
            }
            
 
            if (editSelectedItems.length === 0) {
                isValid = false;
                errorMessage += '- Al menos un ítem del inventario<br>';
                $('#editItemsTable').addClass('border border-danger');
                $('#editItemsHelp').removeClass('d-none');
            } else {
                $('#editItemsTable').removeClass('border border-danger');
                $('#editItemsHelp').addClass('d-none');
            }
            
            if (!isValid) {
                errorMessage = 'Por favor completa los siguientes campos obligatorios:<br>' + errorMessage;
            }
            
            return {
                isValid: isValid,
                errorMessage: errorMessage,
                formData: {
                    serviceId: $('#editServiceId').val(),
                    serviceName: serviceName,
                    serviceDescription: serviceDescription,
                    servicePrice: servicePrice,
                    serviceEventType: serviceEventType
                }
            };
        }
        
 
        $('#editServiceName, #editServiceDescription, #editServicePrice, #editServiceEventType').on('input change', function() {
            $(this).toggleClass('is-invalid', !$(this).val().trim());
            
 
            updateEditSaveButtonState();
        });
        
 
        function updateEditSaveButtonState() {
            const formWithoutItems = $('#editServiceName').val().trim() && 
                                    $('#editServiceDescription').val().trim() && 
                                    $('#editServicePrice').val() > 0 && 
                                    $('#editServiceEventType').val();
                                    
            const hasItems = editSelectedItems.length > 0;
            
            $('#saveEditServiceBtn').prop('disabled', !(formWithoutItems && hasItems));
            
 
            if (formWithoutItems && !hasItems) {
                $('#editItemsTable').addClass('border border-danger');
                $('#editItemsHelp').removeClass('d-none').addClass('text-danger');
            } else {
                $('#editItemsTable').removeClass('border border-danger');
                $('#editItemsHelp').addClass('d-none');
            }
        }
        
 
        $('#saveEditServiceBtn').on('click', async function() {
            console.log("Botón actualizar servicio clickeado");
            
 
            const validation = validateEditServiceForm();
            
            if (!validation.isValid) {
                showAlert('error', validation.errorMessage);
                return;
            }
            
            try {
 
                const button = $(this);
                const originalText = button.html();
                button.html('<i class="spinner-border spinner-border-sm"></i> Guardando...');
                button.prop('disabled', true);
                
                const userEmail = $('#userEmail').val();
                const serviceId = $('#editServiceId').val();
                
                console.log("Usuario:", userEmail);
                console.log("ID Servicio:", serviceId);
                
                if (!userEmail || !serviceId) {
                    throw new Error('No se pudo identificar al usuario o el servicio');
                }
                
 
                const itemsToAdd = [];
                editSelectedItems.filter(item => !item.originalItemId).forEach(item => {
                    itemsToAdd.push({
                        inventarioId: item.id,
                        cantidad: parseInt(item.cantidad)
                    });
                });
                
 
                const itemsToRemove = [];
                
 
                const card = $(`.service-card[data-service-id="${serviceId}"]`);
                console.log("Tarjeta encontrada:", card.length > 0);
                
                try {
 
                    const itemsData = card.find('.service-items-data');
                    const itemsText = itemsData.text().trim();
                    console.log("JSON de items:", itemsText);
                    
                    if (itemsText) {
                        const items = JSON.parse(itemsText);
                        console.log("Items parseados:", items.length);
                        
 
                        const originalItemIds = items.map(item => item.Id || item.id);
                        console.log("IDs originales:", originalItemIds);
                        
 
                        const currentItemIds = editSelectedItems
                            .filter(item => item.originalItemId)
                            .map(item => item.originalItemId);
                        console.log("IDs actuales:", currentItemIds);
                        
 
                        originalItemIds.forEach(itemId => {
                            if (!currentItemIds.includes(itemId)) {
                                itemsToRemove.push(itemId);
                            }
                        });
                    }
                } catch (e) {
                    console.error("Error al obtener los IDs originales:", e);
                }
                
                console.log("Items a agregar:", itemsToAdd);
                console.log("Items a eliminar:", itemsToRemove);
                
 
                const serviceData = {
                    nombreServicio: validation.formData.serviceName,
                    descripcion: validation.formData.serviceDescription,
                    precioBase: parseFloat(validation.formData.servicePrice),
                    tipoEvento: validation.formData.serviceEventType,
                    imagenes: editUploadedImages.filter(img => img.isExisting).map(img => img.url).join(','),
                    itemsToAdd: itemsToAdd,
                    itemsToRemove: itemsToRemove
                };
                
                console.log("Datos a enviar:", serviceData);

 
                const response = await fetch(`/api/servicios/${encodeURIComponent(userEmail)}/${encodeURIComponent(serviceId)}`, {
                    method: 'PUT', 
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(serviceData)
                });

                if (!response.ok) {
                    console.error("Status:", response.status);
                    const errorText = await response.text();
                    console.error("Error response:", errorText);
                    try {
                        const errorJson = JSON.parse(errorText);
                        throw new Error(errorJson.message || "Error al actualizar el servicio");
                    } catch (e) {
                        throw new Error("Error al actualizar el servicio. Respuesta: " + errorText);
                    }
                }

 
                showAlert('success', 'Servicio actualizado exitosamente');
                
 
                $('#editServiceModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 1500); // Dar tiempo para que se muestre el mensaje
                
            } catch (error) {
                console.error('Error al actualizar el servicio:', error);
                showAlert('error', error.message || 'Ocurrió un error al actualizar el servicio');
            } finally {
 
                const button = $('#saveEditServiceBtn');
                button.html('<i class="bi bi-check-circle"></i> Actualizar Servicio');
                button.prop('disabled', false);
            }
        });
        
 
        $('#editServiceModal').on('shown.bs.modal', function() {
            updateEditSaveButtonState();
        });

 
        $('.delete-service-btn').on('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const card = $(this).closest('.service-card');
            const serviceId = card.attr('data-service-id');
            const serviceName = card.attr('data-service-name');
            
 
            $('#deleteServiceId').val(serviceId);
            $('#deleteServiceName').text(serviceName);
            
 
            $('#deleteServiceModal').modal('show');
        });

 
        $('#confirmDeleteServiceBtn').on('click', async function() {
            try {
                const button = $(this);
                const originalText = button.text();
                
 
                button.html('<i class="spinner-border spinner-border-sm"></i> Eliminando...');
                button.prop('disabled', true);
                
                const serviceId = $('#deleteServiceId').val();
                const userEmail = $('#userEmail').val();
                
                if (!serviceId || !userEmail) {
                    showAlert('error', 'No se pudo identificar el servicio o el usuario');
                    return;
                }
                
 
                const response = await fetch(`/api/servicios/${encodeURIComponent(userEmail)}/${encodeURIComponent(serviceId)}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Error al eliminar el servicio');
                }
                
 
                showAlert('success', 'Servicio eliminado exitosamente');
                
 
                $('#deleteServiceModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 1500); // Give time for the alert to be visible
                
            } catch (error) {
                console.error('Error al eliminar el servicio:', error);
                showAlert('error', error.message || 'Ocurrió un error al eliminar el servicio');
            } finally {
 
                const button = $('#confirmDeleteServiceBtn');
                button.text('Eliminar');
                button.prop('disabled', false);
            }
        });

 
        $('#addSelectedItemBtn').on('click', function() {
            console.log('Botón Agregar clickeado');
            
            const itemSelect = $('#itemSelect');
            const selectedOption = itemSelect.find('option:selected');
            const itemId = itemSelect.val();
            const itemQuantity = parseInt($('#itemQuantity').val());
            
            if (!itemId) {
                showAlert('warning', 'Por favor selecciona un ítem');
                return;
            }
            
            if (isNaN(itemQuantity) || itemQuantity < 1) {
                showAlert('warning', 'La cantidad debe ser al menos 1');
                return;
            }
            
 
            const itemStock = parseInt(selectedOption.data('stock'));
            if (itemQuantity > itemStock) {
                showAlert('warning', `Solo hay ${itemStock} unidades disponibles`);
                return;
            }
            
 
            const existingItem = selectedItems.find(item => item.id === itemId);
            if (existingItem) {
                showAlert('warning', 'Este ítem ya ha sido agregado');
                return;
            }
            
 
            const item = {
                id: itemId,
                nombre: selectedOption.data('nombre'),
                categoria: selectedOption.data('categoria'),
                stock: itemStock,
                cantidad: itemQuantity
            };
            
            selectedItems.push(item);
            
 
            updateItemsTable();
            updateSaveButtonState();
            
 
            itemSelect.val('');
            $('#itemQuantity').val(1);
            
            showAlert('success', 'Ítem agregado al servicio');
            
 
            $('#itemsTable').removeClass('border border-danger');
            $('#itemsHelp').addClass('d-none');
        });
        
 
        function updateItemsTable() {
            const itemsTableBody = $('#itemsTableBody');
            const noItemsRow = $('#noItemsRow');
            const itemsCountBadge = $('#itemsCountBadge');
            
            if (selectedItems.length > 0) {
                noItemsRow.hide();
                itemsTableBody.empty();
                
                selectedItems.forEach(function(item, index) {
                    const row = $(`
                        <tr data-item-id="${item.id}">
                            <td>${item.nombre} <span class="badge bg-light text-dark border">${item.categoria}</span></td>
                            <td class="text-center"><span class="badge bg-info text-dark">${item.stock}</span></td>
                            <td class="text-center">
                                <input type="number" class="form-control form-control-sm item-quantity" 
                                    min="1" max="${item.stock}" value="${item.cantidad}" style="width: 70px;">
                            </td>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-danger remove-item" data-index="${index}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `);
                    
                    itemsTableBody.append(row);
                    
 
                    row.find('.item-quantity').on('change', function() {
                        const newQuantity = parseInt($(this).val());
                        if (newQuantity > 0 && newQuantity <= item.stock) {
                            selectedItems[index].cantidad = newQuantity;
                        } else {
                            $(this).val(item.cantidad);
                            showAlert('warning', `La cantidad debe estar entre 1 y ${item.stock}`);
                        }
                    });
                    
 
                    row.find('.remove-item').on('click', function() {
                        const itemIndex = $(this).data('index');
                        selectedItems.splice(itemIndex, 1);
                        updateItemsTable();
                        updateSaveButtonState();
                        showAlert('info', 'Ítem eliminado del servicio');
                    });
                });
                
 
                itemsCountBadge.text(`${selectedItems.length} ítems`);
            } else {
                itemsTableBody.empty();
                noItemsRow.show();
                itemsCountBadge.text('0 ítems');
            }
        }

 
 

 
        $(document).on('click', '.service-card-view, .view-service-btn', function(e) {
            e.preventDefault();
            
            if ($(this).hasClass('edit-service-btn') || $(this).hasClass('delete-service-btn')) {
                return; // No abrir el modal de detalles si se hace clic en botones de edición o eliminación
            }
            
            const card = $(this).closest('.service-card');
            const serviceId = card.attr('data-service-id');
            const serviceName = card.attr('data-service-name');
            const serviceDescription = card.attr('data-service-description');
            const servicePrice = card.attr('data-service-price');
            const serviceEventType = card.attr('data-service-eventtype');
            const serviceImage = card.attr('data-service-images'); // Ahora es una sola imagen
            
 
            $('#viewServiceTitle').text(serviceName);
            $('#viewServiceDescription').text(serviceDescription);
            $('#viewServicePrice').text(`S/ ${servicePrice}`);
            $('#viewServiceEventType').text(serviceEventType);
            
 
            $('#viewServiceImage').attr('src', serviceImage || '/assets/img/placeholder-img.png');
            
 
 
            
            console.log('Abriendo detalles del servicio:', serviceName);
            
 
            $('#viewServiceImages').empty();
            $('#viewServiceItems').empty();
            
 
            $('#viewServiceTitle').text(serviceName);
            $('#viewServiceDescription').text(serviceDescription);
            $('#viewServicePrice').text(`S/ ${parseFloat(servicePrice).toFixed(2)}`);
            $('#viewServiceEventType').text(serviceEventType);
            
 
            if (serviceImages && serviceImages.length > 0) {
 
                $('.carousel-indicators').empty();
                
                serviceImages.forEach((image, index) => {
 
                    $('.carousel-indicators').append(`
                        <button type="button" data-bs-target="#serviceImageCarousel" 
                            data-bs-slide-to="${index}" ${index === 0 ? 'class="active"' : ''}></button>
                    `);
                    
 
                    $('#viewServiceImages').append(`
                        <div class="carousel-item ${index === 0 ? 'active' : ''}">
                            <img src="${image}" class="d-block w-100" alt="Imagen del servicio">
                        </div>
                    `);
                });
            } else {
 
                $('#viewServiceImages').append(`
                    <div class="carousel-item active">
                        <img src="/assets/img/placeholder-img.png" class="d-block w-100" alt="Sin imagen">
                    </div>
                `);
            }
            
 
            try {
                const itemsJson = card.find('.service-items-data').text().trim();
                if (itemsJson) {
                    const items = JSON.parse(itemsJson);
                    
                    if (items && items.length > 0) {
 
                        const itemsTable = $(`
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Ítem</th>
                                        <th>Categoría</th>
                                        <th>Cantidad</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        `);
                        
 
                        items.forEach(item => {
                            itemsTable.find('tbody').append(`
                                <tr>
                                    <td>${item.NombreItem || item.nombreItem}</td>
                                    <td><span class="badge bg-light text-dark">${item.CategoriaItem || item.categoriaItem || 'General'}</span></td>
                                    <td>${item.Cantidad || item.cantidad} unid.</td>
                                </tr>
                            `);
                        });
                        
                        $('#viewServiceItems').append(itemsTable);
                    } else {
                        $('#viewServiceItems').html('<p class="text-muted">No hay ítems asociados a este servicio.</p>');
                    }
                } else {
                    $('#viewServiceItems').html('<p class="text-muted">No hay ítems asociados a este servicio.</p>');
                }
            } catch (e) {
                console.error('Error al cargar los ítems:', e);
                $('#viewServiceItems').html('<p class="text-muted">Error al cargar los ítems.</p>');
            }
            
 
            $('#viewServiceModal').modal('show');
        });
        
 
        function showAlert(type, message) {
 
            const alertId = 'alert_' + Date.now();
            
 
            let alertClass = 'alert-info';
            let icon = 'info-circle-fill';
            
            switch(type) {
                case 'success':
                    alertClass = 'alert-success';
                    icon = 'check-circle-fill';
                    break;
                case 'error':
                    alertClass = 'alert-danger';
                    icon = 'exclamation-triangle-fill';
                    break;
                case 'warning':
                    alertClass = 'alert-warning';
                    icon = 'exclamation-triangle-fill';
                    break;
            }
            
 
            const alertHtml = `
                <div id="${alertId}" class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${icon} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
 
            let alertContainer = $('#alertContainer');
            if (alertContainer.length === 0) {
                $('body').prepend('<div id="alertContainer" style="position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 350px;"></div>');
                alertContainer = $('#alertContainer');
            }
            
 
            alertContainer.append(alertHtml);
            
 
            setTimeout(() => {
                $(`#${alertId}`).alert('close');
            }, 5000);
        }

 
        function validateServiceForm() {
            const serviceName = $('#newServiceName').val().trim();
            const serviceDescription = $('#newServiceDescription').val().trim();
            const servicePrice = $('#newServicePrice').val();
            const serviceEventType = $('#newServiceEventType').val();
            const serviceImageUrl = $('#newServiceImageUrl').val().trim();
            
            let isValid = true;
            let errorMessage = '';
            
 
            if (!serviceName) {
                $('#newServiceName').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Nombre del servicio<br>';
            } else {
                $('#newServiceName').removeClass('is-invalid');
            }
            
 
            if (!serviceDescription) {
                $('#newServiceDescription').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Descripción<br>';
            } else {
                $('#newServiceDescription').removeClass('is-invalid');
            }
            
 
            if (!servicePrice || isNaN(servicePrice) || parseFloat(servicePrice) <= 0) {
                $('#newServicePrice').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Precio válido<br>';
            } else {
                $('#newServicePrice').removeClass('is-invalid');
            }
            
 
            if (!serviceEventType) {
                $('#newServiceEventType').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Tipo de evento<br>';
            } else {
                $('#newServiceEventType').removeClass('is-invalid');
            }
            
 
            if (!serviceImageUrl) {
                $('#newServiceImageUrl').addClass('is-invalid');
                isValid = false;
                errorMessage += '- URL de la imagen<br>';
            } else {
                $('#newServiceImageUrl').removeClass('is-invalid');
            }
            
            return {
                isValid: isValid,
                errorMessage: errorMessage
            };
        }
        
 
        function validateEditServiceForm() {
            const serviceName = $('#editServiceName').val().trim();
            const serviceDescription = $('#editServiceDescription').val().trim();
            const servicePrice = $('#editServicePrice').val();
            const serviceEventType = $('#editServiceEventType').val();
            const serviceImageUrl = $('#editServiceImageUrl').val().trim();
            
            let isValid = true;
            let errorMessage = '';
            
 
            if (!serviceName) {
                $('#editServiceName').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Nombre del servicio<br>';
            } else {
                $('#editServiceName').removeClass('is-invalid');
            }
            
 
            if (!serviceDescription) {
                $('#editServiceDescription').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Descripción<br>';
            } else {
                $('#editServiceDescription').removeClass('is-invalid');
            }
            
 
            if (!servicePrice || isNaN(servicePrice) || parseFloat(servicePrice) <= 0) {
                $('#editServicePrice').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Precio válido<br>';
            } else {
                $('#editServicePrice').removeClass('is-invalid');
            }
            
 
            if (!serviceEventType) {
                $('#editServiceEventType').addClass('is-invalid');
                isValid = false;
                errorMessage += '- Tipo de evento<br>';
            } else {
                $('#editServiceEventType').removeClass('is-invalid');
            }
            
 
            if (!serviceImageUrl) {
                $('#editServiceImageUrl').addClass('is-invalid');
                isValid = false;
                errorMessage += '- URL de la imagen<br>';
            } else {
                $('#editServiceImageUrl').removeClass('is-invalid');
            }
            
            return {
                isValid: isValid,
                errorMessage: errorMessage
            };
        }

 
        $('#newServiceName, #newServiceDescription, #newServicePrice, #newServiceEventType').on('input change', function() {
            $(this).toggleClass('is-invalid', !$(this).val().trim());
            
 
            updateSaveButtonState();
        });

 
        function updateSaveButtonState() {
            const formWithoutItems = $('#newServiceName').val().trim() && 
                                    $('#newServiceDescription').val().trim() && 
                                    $('#newServicePrice').val() > 0 && 
                                    $('#newServiceEventType').val();
                                    
            const hasItems = selectedItems.length > 0;
            
            $('#saveNewServiceBtn').prop('disabled', !(formWithoutItems && hasItems));
            
 
            if (formWithoutItems && !hasItems) {
                $('#itemsTable').addClass('border border-danger');
                $('#itemsHelp').removeClass('d-none').addClass('text-danger');
            } else {
                $('#itemsTable').removeClass('border border-danger');
                $('#itemsHelp').addClass('d-none');
            }
        }

 
        const originalUpdateItemsTable = updateItemsTable;
        updateItemsTable = function() {
            originalUpdateItemsTable();
            updateSaveButtonState();
        };

 
        
        $('#saveNewServiceBtn').on('click', async function() {
 
            const validation = validateServiceForm();
            if (!validation.isValid) {
                showAlert('warning', `Por favor completa los siguientes campos:<br>${validation.errorMessage}`);
                return;
            }
            
            const button = $(this);
            const originalText = button.html();
            
            try {
                button.html('<i class="spinner-border spinner-border-sm"></i> Guardando...');
                button.prop('disabled', true);
                
 
                const imageUrl = $('#newServiceImageUrl').val().trim();
                if (!imageUrl) {
                    showAlert('warning', 'Por favor ingresa la URL de una imagen');
                    return;
                }
                
 
                const serviceData = {
                    nombreServicio: $('#newServiceName').val().trim(),
                    descripcion: $('#newServiceDescription').val().trim(),
                    precioBase: parseFloat($('#newServicePrice').val()),
                    tipoEvento: $('#newServiceEventType').val(),
                    imagenes: imageUrl, // Solo la URL de la imagen
                    items: selectedItems.map(item => ({
                        inventarioId: item.id,
                        cantidad: item.cantidad
                    }))
                };
                
 
                const userEmail = $('#userEmail').val();

                if (!userEmail) {
                    showAlert('error', 'No se pudo identificar al usuario');
                    return;
                }
                
 
                const response = await fetch(`/api/servicios/create?correo=${encodeURIComponent(userEmail)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(serviceData)
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Error al crear el servicio');
                }
                
 
                showAlert('success', 'Servicio creado exitosamente');
                
 
                $('#newServiceModal').modal('hide');
                setTimeout(() => {
                    location.reload();
                }, 1500); // Dar tiempo para que se muestre el mensaje
                
            } catch (error) {
                console.error('Error al crear el servicio:', error);
                showAlert('error', error.message || 'Ocurrió un error al crear el servicio');
            } finally {
 
                button.html(originalText);
                button.prop('disabled', false);
            }
        });

 
        $('#saveNewServiceBtn').prop('disabled', true);

 
        $('#newServiceModal').on('shown.bs.modal', function() {
 
            $('#newServiceName').focus();
            
 
            $('#saveNewServiceBtn').prop('disabled', true);
        });

 
        $('#newServiceModal').on('hidden.bs.modal', function() {
 
            $('#newServiceForm')[0].reset();
            
 
            imagePreviewContainer.empty();
            uploadedImages = [];
            
 
            selectedItems = [];
            updateItemsTable();
        });

 
        $('#newServiceImageUrl').on('input', function() {
            const imageUrl = $(this).val().trim();
            const previewContainer = $('#imagePreview');
            
            if (imageUrl) {
                previewContainer.find('img').attr('src', imageUrl).on('error', function() {
                    $(this).attr('src', '/assets/img/placeholder-img.png');
                    showAlert('warning', 'No se pudo cargar la imagen. Verifica la URL.');
                }).on('load', function() {
                    if (!previewContainer.is(':visible')) {
                        previewContainer.removeClass('d-none');
                    }
                });
            } else {
                previewContainer.addClass('d-none');
            }
        });
        
 
        $('#clearImageBtn').on('click', function() {
            $('#newServiceImageUrl').val('').trigger('input');
            $('#imagePreview').addClass('d-none');
        });
        
 
        $('#editServiceImageUrl').on('input', function() {
            const imageUrl = $(this).val().trim();
            const previewContainer = $('#editImagePreview');
            
            if (imageUrl) {
                previewContainer.find('img').attr('src', imageUrl).on('error', function() {
                    $(this).attr('src', '/assets/img/placeholder-img.png');
                    showAlert('warning', 'No se pudo cargar la imagen. Verifica la URL.');
                }).on('load', function() {
                    if (!previewContainer.is(':visible')) {
                        previewContainer.removeClass('d-none');
                    }
                });
            } else {
                previewContainer.addClass('d-none');
            }
        });
        
 
        $('#clearEditImageBtn').on('click', function() {
            $('#editServiceImageUrl').val('').trigger('input');
            $('#editImagePreview').addClass('d-none');
        });
    });
</script>
